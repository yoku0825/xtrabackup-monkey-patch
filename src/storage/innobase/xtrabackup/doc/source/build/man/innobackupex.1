.\" Man page generated from reStructuredText.
.
.TH "INNOBACKUPEX" "1" "Dec 13, 2023" "2.4" "Percona XtraBackup"
.SH NAME
innobackupex \- innobackupex Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
The \fIinnobackupex\fP program is a symlink to the xtrabackup \fIC\fP program. It lets you perform
point\-in\-time backups of \fIInnoDB\fP / \fIXtraDB\fP tables together with the schema
definitions, \fIMyISAM\fP tables, and other portions of the server. In previous
versions \fIinnobackupex\fP was implemented as a \fIPerl\fP script.
.sp
This manual section explains how to use \fIinnobackupex\fP in detail.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
The \fIinnobackupex\fP program is deprecated. Please switch to \fIxtrabackup\fP\&.
.UNINDENT
.UNINDENT
.SH THE BACKUP CYCLE - FULL BACKUPS
.SS Creating a Backup with innobackupex
.sp
innobackupex is the tool which provides functionality to backup a whole MySQL
database instance using the xtrabackup in combination with tools like
xbstream and xbcrypt.
.sp
To create a full backup, invoke the script with the options needed to connect to
the server and only one argument: the path to the directory where the backup
will be stored
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-user=DBUSER \-\-password=DBUSERPASS /path/to/BACKUP\-DIR/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and check the last line of the output for a confirmation message:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
innobackupex: Backup created in directory \(aq/path/to/BACKUP\-DIR/2013\-03\-25_00\-00\-09\(aq
innobackupex: MySQL binlog position: filename \(aqmysql\-bin.000003\(aq, position 1946
111225 00:00:53  innobackupex: completed OK!
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The backup will be stored within a time stamped directory created in the
provided path, \fI/path/to/BACKUP\-DIR/2013\-03\-25_00\-00\-09\fP in this
particular example.
.SS Under the hood
.sp
innobackupex called xtrabackup binary to backup all the data of \fIInnoDB\fP
tables (see creating_a_backup for details on this
process) and copied all the table definitions in the database (\fI\&.frm\fP
files), data and files related to \fIMyISAM\fP, \fIMERGE <.MRG>\fP (reference to
other tables), \fICSV <.CSV>\fP and \fIARCHIVE <.ARM>\fP tables, along with
\fItriggers <.TRG>\fP and \fIdatabase configuration information <.opt>\fP to
a time stamped directory created in the provided path.
.sp
It will also create the following files for
convenience on the created directory.
.SS \fIinnobackupex \-\-no\-timestamp\fP
.sp
This option tells innobackupex not to create a time stamped directory to store the backup:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-user=DBUSER \-\-password=DBUSERPASS /path/to/BACKUP\-DIR/ \-\-no\-timestamp
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
innobackupex will create the \fBBACKUP\-DIR\fP subdirectory (or fail if exists) and store the backup inside of it.
.SS \fIinnobackupex \-\-defaults\-file\fP
.sp
You can provide another configuration file to innobackupex with this option. The
only limitation is that \fBit has to be the first option passed\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-defaults\-file=/tmp/other\-my.cnf \-\-user=DBUSER \-\-password=DBUSERPASS /path/to/BACKUP\-DIR/
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Preparing a Full Backup with \fIinnobackupex\fP
.sp
The purpose of the \fBprepare stage\fP is to perform any pending operations and make the data consistent. After creating a backup, for example, uncommitted transactions must be undone or log transactions must be replayed. After this stage has finished, the data is ready.
.sp
To prepare a backup with \fIinnobackupex\fP you have to use the
\fIinnobackupex \-\-apply\-log\fP option and full path to the backup directory as an
argument:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-apply\-log /path/to/BACKUP\-DIR
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and check the last line of the output for a confirmation on the process:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
150806 01:01:57  InnoDB: Shutdown completed; log sequence number 1609228
150806 01:01:57  innobackupex: completed OK!
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If it succeeded, \fIinnobackupex\fP performed all operations needed, leaving the
data ready to use immediately.
.SS Under the hood
.sp
\fIinnobackupex\fP started the prepare process by reading the configuration from the
\fIbackup\-my.cnf\fP file in the backup directory.
.sp
After that, \fIinnobackupex\fP replayed the committed transactions in the log files
(some transactions could have been done while the backup was being done) and
rolled back the uncommitted ones. Once this is done, all the information lay in
the tablespace (the InnoDB files), and the log files are re\-created.
.sp
This implies calling \fIinnobackupex \-\-apply\-log\fP twice. More details of
this process are shown in the xtrabackup section\&.
.sp
Note that this preparation is not suited for incremental backups. If you perform
it on the base of an incremental backup, you will not be able to "add" the
increments. See incremental_backups_innobackupex\&.
.SS Other options to consider
\fIinnobackupex \-\-use\-memory\fP
.sp
The preparing process can be sped up by using more memory in it. It depends on
the free or available \fBRAM\fP on your system, it defaults to \fB100MB\fP\&. In
general, the more memory available to the process, the better. The amount of
memory used in the process can be specified by multiples of bytes:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-apply\-log \-\-use\-memory=4G /path/to/BACKUP\-DIR
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Restoring a Full Backup with \fIinnobackupex\fP
.sp
For convenience, \fIinnobackupex\fP has a \fIinnobackupex \-\-copy\-back\fP option,
which performs the restoration of a backup to the server\(aqs \fIdatadir\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-copy\-back /path/to/BACKUP\-DIR
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It will copy all the data\-related files back to the server\(aqs \fIdatadir\fP,
determined by the server\(aqs \fImy.cnf\fP configuration file. You should check
the last line of the output for a success message:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
innobackupex: Finished copying back files.

111225 01:08:13  innobackupex: completed OK!
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The \fIdatadir\fP must be empty; \fIPercona XtraBackup\fP \fIinnobackupex \-\-copy\-back\fP
option will not copy over existing files unless
\fIinnobackupex \-\-force\-non\-empty\-directories\fP option is
specified. Also it is important to note that \fIMySQL\fP server needs to be shut
down before restore is performed. You can\(aqt restore to a \fIdatadir\fP of a
running mysqld instance (except when importing a partial backup).
.UNINDENT
.UNINDENT
.sp
As files\(aq attributes will be preserved, in most cases you will need to change
the files\(aq ownership to \fBmysql\fP before starting the database server, as they
will be owned by the user who created the backup:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ chown \-R mysql:mysql /var/lib/mysql
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Also note that all of these operations will be done as the user calling
\fIinnobackupex\fP, you will need write permissions on the server\(aqs \fIdatadir\fP\&.
.SH OTHER TYPES OF BACKUP
.SS Incremental Backups with \fIinnobackupex\fP
.sp
As not all information changes between each backup, the incremental backup
strategy uses this to reduce the storage needs and the duration of making a
backup.
.sp
This can be done because each \fIInnoDB\fP page has a log sequence number, \fILSN\fP,
which acts as a version number of the entire database. Every time the database
is modified, this number gets incremented.
.sp
An incremental backup copies all pages since a specific \fILSN\fP\&.
.sp
Once the pages have been put together in their respective order, applying the
logs will recreate the process that affected the database, yielding the data at
the moment of the most recently created backup.
.SS Creating an Incremental Backups with \fIinnobackupex\fP
.sp
First, you need to make a full backup as the BASE for subsequent incremental backups:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex /data/backups
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will create a timestamped directory in \fI/data/backups\fP\&. Assuming that
the backup is done last day of the month, \fBBASEDIR\fP would be
\fI/data/backups/2013\-03\-31_23\-01\-18\fP, for example.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
You can use the \fIinnobackupex \-\-no\-timestamp\fP option to override this
behavior and the backup will be created in the given directory.
.UNINDENT
.UNINDENT
.sp
If you check at the \fIxtrabackup\-checkpoints\fP file in \fBBASE\-DIR\fP, you
should see something like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
backup_type = full\-backuped
from_lsn = 0
to_lsn = 1626007
last_lsn = 1626007
compact = 0
recover_binlog_info = 1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To create an incremental backup the next day, use \fIinnobackupex
\-\-incremental\fP and provide the BASEDIR:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-incremental /data/backups \-\-incremental\-basedir=BASEDIR
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Another timestamped directory will be created in \fI/data/backups\fP, in this
example, \fI/data/backups/2013\-04\-01_23\-01\-18\fP containing the incremental
backup. We will call this \fBINCREMENTAL\-DIR\-1\fP\&.
.sp
If you check at the \fIxtrabackup\-checkpoints\fP file in
\fBINCREMENTAL\-DIR\-1\fP, you should see something like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
backup_type = incremental
from_lsn = 1626007
to_lsn = 4124244
last_lsn = 4124244
compact = 0
recover_binlog_info = 1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Creating another incremental backup the next day will be analogous, but this
time the previous incremental one will be base:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-incremental /data/backups \-\-incremental\-basedir=INCREMENTAL\-DIR\-1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Yielding (in this example) \fI/data/backups/2013\-04\-02_23\-01\-18\fP\&. We will
use \fBINCREMENTAL\-DIR\-2\fP instead for simplicity.
.sp
At this point, the \fIxtrabackup\-checkpoints\fP file in \fBINCREMENTAL\-DIR\-2\fP
should contain something like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
backup_type = incremental
from_lsn = 4124244
to_lsn = 6938371
last_lsn = 7110572
compact = 0
recover_binlog_info = 1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As it was said before, an incremental backup only copy pages with a \fILSN\fP
greater than a specific value. Providing the \fILSN\fP would have produced
directories with the same data inside:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
innobackupex \-\-incremental /data/backups \-\-incremental\-lsn=4124244
innobackupex \-\-incremental /data/backups \-\-incremental\-lsn=6938371
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This is a very useful way of doing an incremental backup, since not always the
base or the last incremental will be available in the system.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This procedure only affects \fIXtraDB\fP or \fIInnoDB\fP\-based tables. Other tables
with a different storage engine, e.g. \fIMyISAM\fP, will be copied entirely each
time an incremental backup is performed.
.UNINDENT
.UNINDENT
.SS Preparing an Incremental Backup with \fIinnobackupex\fP
.sp
Preparing incremental backups is a bit different than full backups. This is,
perhaps, the stage where more attention is needed:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
First, \fBonly the committed transactions must be replayed on each
backup\fP\&. This will merge the base full backup with the incremental ones.
.IP \(bu 2
Then, the uncommitted transaction must be rolled back in order to have a
ready\-to\-use backup.
.UNINDENT
.UNINDENT
.UNINDENT
.sp
If you replay the committed transactions \fBand\fP rollback the uncommitted ones
on the base backup, you will not be able to add the incremental ones. If you do
this on an incremental one, you won\(aqt be able to add data from that moment and
the remaining increments.
.sp
Having this in mind, the procedure is very straight\-forward using the
\fIinnobackupex \-\-redo\-only\fP option, starting with the base backup:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
innobackupex \-\-apply\-log \-\-redo\-only BASE\-DIR
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You should see an output similar to:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
160103 22:00:12 InnoDB: Shutdown completed; log sequence number 4124244
160103 22:00:12 innobackupex: completed OK!
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Then, the first incremental backup can be applied to the base backup, by issuing:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
innobackupex \-\-apply\-log \-\-redo\-only BASE\-DIR \-\-incremental\-dir=INCREMENTAL\-DIR\-1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You should see an output similar to the previous one but with corresponding \fILSN\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
160103 22:08:43 InnoDB: Shutdown completed; log sequence number 6938371
160103 22:08:43 innobackupex: completed OK!
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If no \fIinnobackupex \-\-incremental\-dir\fP is set, \fIinnobackupex\fP will use the most
recent subdirectory created in the basedir.
.sp
At this moment, \fBBASE\-DIR\fP contains the data up to the moment of the first
incremental backup. Note that the full data will always be in the directory of
the base backup, as we are appending the increments to it.
.sp
Repeat the procedure with the second one:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-apply\-log BASE\-DIR \-\-incremental\-dir=INCREMENTAL\-DIR\-2
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the \fIcompleted OK!\fP message was shown, the final data will be in the base
backup directory, \fBBASE\-DIR\fP\&.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fIinnobackupex \-\-redo\-only\fP should be used when merging all incrementals
except the last one. That\(aqs why the previous line doesn\(aqt contain the
\fIinnobackupex \-\-redo\-only\fP option. Even if the \fIinnobackupex \-\-redo\-only\fP
was used on the last step, backup would still be consistent but
in that case server would perform the rollback phase.
.UNINDENT
.UNINDENT
.sp
You can use this procedure to add more increments to the base, as long as you do
it in the chronological order that the backups were done. If you merge the
incrementals in the wrong order, the backup will be useless. If you have doubts
about the order that they must be applied, you can check the file
\fIxtrabackup_checkpoints\fP at the directory of each one, as shown in the
beginning of this section.
.sp
Once you merge the base with all the increments, you can prepare it to roll back
the uncommitted transactions:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-apply\-log BASE\-DIR
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now your backup is ready to be used immediately after restoring it. This
preparation step is optional. However, if you restore without doing the prepare,
the database server will begin to rollback uncommitted transactions, the same
work it would do if a crash had occurred. This results in delay as the database
server starts, and you can avoid the delay if you do the prepare.
.sp
Note that the \fIiblog*\fP files will not be created by \fIinnobackupex\fP, if you
want them to be created, use \fIxtrabackup \-\-prepare\fP on the
directory. Otherwise, the files will be created by the server once started.
.SS Restoring Incremental Backups with \fIinnobackupex\fP
.sp
After preparing the incremental backups, the base directory contains the same
data as the full backup. For restoring it, you can use the \fIxtrabackup
\-\-copy\-back\fP parameter:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ xtrabackup \-\-copy\-back \-\-target\-dir=BASE\-DIR
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the incremental backup was created using the \fIxtrabackup \-\-compress\fP
option, then you need to run \fIxtrabackup \-\-decompress\fP followed by
\fIxtrabackup \-\-copy\-back\fP\&.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ xtrabackup \-\-decompress \-\-target\-dir=BASE\-DIR
$ xtrabackup \-\-copy\-back \-\-target\-dir=BASE\-DIR
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You may have to change the ownership as detailed on restoring_a_backup_ibk\&.
.SS Incremental Streaming Backups using xbstream and tar
.sp
Incremental streaming backups can be performed with the \fIxbstream\fP streaming
option. Currently backups are packed in custom \fBxbstream\fP format. With this
feature, you need to take a BASE backup as well.
Taking a base backup.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex /data/backups
.ft P
.fi
.UNINDENT
.UNINDENT
Taking a local backup.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-incremental \-\-incremental\-lsn=LSN\-number \-\-stream=xbstream ./ > incremental.xbstream
.ft P
.fi
.UNINDENT
.UNINDENT
Unpacking the backup.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ xbstream \-x < incremental.xbstream
.ft P
.fi
.UNINDENT
.UNINDENT
Taking a local backup and streaming it to the remote server and unpacking it.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex  \-\-incremental \-\-incremental\-lsn=LSN\-number \-\-stream=xbstream ./ | \e
ssh user@hostname " cat \- | xbstream \-x \-C > /backup\-dir/"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Partial Backups
.sp
\fIPercona XtraBackup\fP features partial backups, which means that you may backup
only some specific tables or databases. The tables you back up must be in
separate tablespaces, as a result of being created or altered after you enabled
the \fIinnodb_file_per_table\fP option on the server.
.sp
There is only one caveat about partial backups: do not copy back the prepared
backup. Restoring partial backups should be done by importing the tables, not by
using the traditional \fIinnobackupex \-\-copy\-back\fP option. Although there
are some scenarios where restoring can be done by copying back the files, this
may be lead to database inconsistencies in many cases and it is not the
recommended way to do it.
.SS Creating Partial Backups
.sp
There are three ways of specifying which part of the whole data will be backed
up: regular expressions (\fIinnobackupex \-\-include\fP), enumerating the
tables in a file (\fIinnobackupex \-\-tables\-file\fP) or providing a list of
databases (\fIinnobackupex \-\-databases\fP).
.SS Using \fIinnobackupex \-\-include\fP
.sp
The regular expression provided to this will be matched against the fully
qualified table name, including the database name, in the form
\fBdatabasename.tablename\fP\&.
.sp
For example,
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-include=\(aq^mydatabase[.]mytable\(aq /path/to/backup
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The command above will create a timestamped directory with the usual files that
\fIinnobackupex\fP creates, but only the data files related to the tables matched.
.sp
Note that this option is passed to \fIxtrabackup \-\-tables\fP and is matched
against each table of each database, the directories of each database will be
created even if they are empty.
.SS Using \fIinnobackupex \-\-tables\-file\fP
.sp
The text file provided (the path) to this option can contain multiple table
names, one per line, in the \fBdatabasename.tablename\fP format.
.sp
For example,
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ echo "mydatabase.mytable" > /tmp/tables.txt
$ innobackupex \-\-tables\-file=/tmp/tables.txt /path/to/backup
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The command above will create a timestamped directory with the usual files that
\fIinnobackupex\fP creates, but only containing the data\-files related to the tables
specified in the file.
.sp
This option is passed to \fIxtrabackup \-\-tables\-file\fP and, unlike the
\fI\-\-tables <xtrabackup \-\-tables>\fP option, only directories of databases
of the selected tables will be created.
.SS Using \fIinnobackupex \-\-databases\fP
.sp
This option accepts either a space\-separated list of the databases and tables to
backup \- in the \fBdatabasename[.tablename]\fP form.
.sp
For example,
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-databases="mydatabase.mytable mysql" /path/to/backup
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The command above will create a timestamped directory with the usual files that
\fIinnobackupex\fP creates, but only containing the datafiles related to
\fBmytable\fP in the \fBmydatabase\fP directory and the \fBmysql\fP directory with the
entire \fBmysql\fP database.
.sp
The \fI\-\-databases\-file\fP option specifies the path to a text file which contains a case\-sensitive list of databases and tables to be backed up. The file can contain the names of multiple databases and tables in a \fBdatabasename[.tablename]\fP format with one element for each line. Only the named databases and tables are backed up. The names must match exactly. There is no pattern matching or regular expression matching.
.SS Preparing Partial Backups
.sp
For preparing partial backups, the procedure is analogous to restoring
individual tables : apply the logs and use
the \fIinnobackupex \-\-export\fP option:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-apply\-log \-\-export /path/to/partial/backup
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You may see warnings in the output about tables that don\(aqt exist. This is
because \fIInnoDB\fP \-based engines stores its data dictionary inside the tablespace
files besides the \fI\&.frm\fP files. \fIinnobackupex\fP will use \fIxtrabackup\fP to
remove the missing tables (those who weren\(aqt selected in the partial backup)
from the data dictionary in order to avoid future warnings or errors:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
111225  0:54:06  InnoDB: Error: table \(aqmydatabase/mytablenotincludedinpartialb\(aq
InnoDB: in InnoDB data dictionary has tablespace id 6,
InnoDB: but tablespace with that id or name does not exist. It will be removed from data dictionary.
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You should also see the notification of the creation of a file needed for
importing (\fI\&.exp\fP file) for each table included in the partial backup:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
xtrabackup: export option is specified.
xtrabackup: export metadata of table \(aqemployees/departments\(aq to file \(ga.//departments.exp\(ga (2 indexes)
xtrabackup:     name=PRIMARY, id.low=80, page=3
xtrabackup:     name=dept_name, id.low=81, page=4
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that you can use the \fIinnobackupex \-\-export\fP option with
\fIinnobackupex \-\-apply\-log\fP to an already\-prepared backup in order to
create the \fI\&.exp\fP files.
.sp
Finally, check for the confirmation message in the output:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
111225 00:54:18  innobackupex: completed OK!
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Restoring Partial Backups
.sp
Restoring should be done by restoring individual tables in the partial backup to the server.
.sp
It can also be done by copying back the prepared backup to a "clean"
\fIdatadir\fP (in that case, make sure to include the \fBmysql\fP
database). System database can be created with:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo mysql_install_db \-\-user=mysql
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Encrypted Backups
.sp
\fIPercona XtraBackup\fP has implemented support for encrypted backups. It can be
used to encrypt/decrypt local or streaming backup with xbstream option
(streaming tar backups are not supported) in order to add another layer of
protection to the backups. Encryption is done with the \fBlibgcrypt\fP library.
.SS Creating Encrypted Backups
.sp
To make an encrypted backup following options need to be specified (options
\fIinnobackupex \-\-encrypt\-key\fP and \fIinnobackupex
\-\-encrypt\-key\-file\fP are mutually exclusive, i.e. just one of them needs to be
provided):
.INDENT 0.0
.IP \(bu 2
\fIinnobackupex \-\-encrypt\fP
.IP \(bu 2
\fIinnobackupex \-\-encrypt\-key\fP
.IP \(bu 2
\fIinnobackupex \-\-encrypt\-key\-file\fP
.UNINDENT
.sp
Both \fIinnobackupex \-\-encrypt\-key\fP option and \fIinnobackupex
\-\-encrypt\-key\-file\fP option can be used to specify the encryption key. Encryption
key can be generated with a command like:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ openssl rand \-base64 24
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Example output of that command should look like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
GCHFLrDFVx6UAsRb88uLVbAVWbK+Yzfs
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This value then can be used as the encryption key
.SS Using \fIinnobackupex \-\-encrypt\-key\fP
.sp
Example of the innobackupex command using the \fIinnobackupex
\-\-encrypt\-key\fP should look like this
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-encrypt=AES256 \-\-encrypt\-key="GCHFLrDFVx6UAsRb88uLVbAVWbK+Yzfs" /data/backups
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Using \fIinnobackupex \-\-encrypt\-key\-file\fP
.sp
Example of the innobackupex command using the \fIinnobackupex
\-\-encrypt\-key\-file\fP should look like this
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-encrypt=AES256 \-\-encrypt\-key\-file=/data/backups/keyfile /data/backups
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Depending on the text editor used for making the \fBKEYFILE\fP, text file in
some cases can contain the CRLF and this will cause the key size to grow and
thus making it invalid. Suggested way to do this would be to create the file
with: \fBecho \-n "GCHFLrDFVx6UAsRb88uLVbAVWbK+Yzfs" > /data/backups/keyfile\fP
.UNINDENT
.UNINDENT
.sp
Both of these examples will create a timestamped directory in
\fI/data/backups\fP containing the encrypted backup.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
You can use the \fIinnobackupex \-\-no\-timestamp\fP option to override this
behavior and the backup will be created in the given directory.
.UNINDENT
.UNINDENT
.SS Optimizing the encryption process
.sp
Two new options have been introduced with the encrypted backups that can be used
to speed up the encryption process. These are \fIinnobackupex
\-\-encrypt\-threads\fP and \fIinnobackupex \-\-encrypt\-chunk\-size\fP\&. By using the
\fIinnobackupex \-\-encrypt\-threads\fP option multiple threads can be
specified to be used for encryption in parallel. Option \fIinnobackupex
\-\-encrypt\-chunk\-size\fP can be used to specify the size (in bytes) of the working
encryption buffer for each encryption thread (default is 64K).
.SS Decrypting Encrypted Backups
.sp
Backups can be decrypted with xbcrypt\&. The following one\-liner can be
used to encrypt the whole folder:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ for i in \(gafind . \-iname "*\e.xbcrypt"\(ga; do xbcrypt \-d \-\-encrypt\-key\-file=/root/secret_key \-\-encrypt\-algo=AES256 < $i > $(dirname $i)/$(basename $i .xbcrypt) && rm $i; done
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fIPercona XtraBackup\fP \fIinnobackupex \-\-decrypt\fP option has been
implemented that can be used to decrypt the backups:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-decrypt=AES256 \-\-encrypt\-key="GCHFLrDFVx6UAsRb88uLVbAVWbK+Yzfs" /data/backups/2015\-03\-18_08\-31\-35/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fIPercona XtraBackup\fP doesn\(aqt automatically remove the encrypted files. In order
to clean up the backup directory users should remove the \fI*.xbcrypt\fP
files.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fIinnobackupex \-\-parallel\fP can be used with \fIinnobackupex \-\-decrypt\fP
option to decrypt multiple files simultaneously.
.UNINDENT
.UNINDENT
.sp
When the files have been decrypted backup can be prepared.
.SS Preparing Encrypted Backups
.sp
After the backups have been decrypted, they can be prepared the same way as the
standard full backups with the \fIinnobackupex \-\-apply\-log\fP option:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-apply\-log /data/backups/2015\-03\-18_08\-31\-35/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fIPercona XtraBackup\fP doesn\(aqt automatically remove the encrypted files. In
order to clean up the backup directory users should remove the
\fI*.xbcrypt\fP files.
.UNINDENT
.UNINDENT
.SS Restoring Encrypted Backups
.sp
innobackupex has a \fIinnobackupex \-\-copy\-back\fP option, which performs the
restoration of a backup to the server\(aqs \fIdatadir\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-copy\-back /path/to/BACKUP\-DIR
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It will copy all the data\-related files back to the server\(aqs \fIdatadir\fP,
determined by the server\(aqs \fImy.cnf\fP configuration file. You should check
the last line of the output for a success message:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
innobackupex: Finished copying back files.
150318 11:08:13  innobackupex: completed OK!
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Other Reading
.INDENT 0.0
.IP \(bu 2
\fI\%The Libgcrypt Reference Manual\fP
.UNINDENT
.SH ADVANCED FEATURES
.SS Streaming and Compressing Backups
.sp
Streaming mode, supported by \fIPercona XtraBackup\fP, sends backup to \fBSTDOUT\fP in
special \fBtar\fP or \fIxbstream\fP format instead of copying files to the backup
directory.
.sp
This allows you to use other programs to filter the output of the backup,
providing greater flexibility for storage of the backup. For example,
compression is achieved by piping the output to a compression utility. One of
the benefits of streaming backups and using Unix pipes is that the backups can
be automatically encrypted.
.sp
To use the streaming feature, you must use the \fIinnobackupex \-\-stream\fP,
providing the format of the stream (\fBtar\fP or \fBxbstream\fP ) and where to store
the temporary files:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-stream=tar /tmp
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fIinnobackupex\fP uses \fIxbstream\fP to stream all of the data files to \fBSTDOUT\fP, in
a special \fBxbstream\fP format. See \&../xbstream/xbstream for
details. After it finishes streaming all of the data files to \fBSTDOUT\fP, it
stops xtrabackup and streams the saved log file too.
.sp
When compression is enabled, \fIxtrabackup\fP compresses all output data, except the
meta and non\-InnoDB files which are not compressed, using the specified
compression algorithm. The only currently supported algorithm is
\fBquicklz\fP\&. The resulting files have the qpress archive format, i.e. every
*.qp file produced by xtrabackup is essentially a one\-file qpress archive and
can be extracted and uncompressed by the \fI\%qpress file archiver\fP which is available from Percona Software
repositories\&.
.sp
Using \fIxbstream\fP as a stream option, backups can be copied and compressed in
parallel which can significantly speed up the backup process. In case backups
were both compressed and encrypted, they\(aqll need to decrypted first in order to
be uncompressed.
.SS Examples using xbstream
.sp
Store the complete backup directly to a single file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-stream=xbstream /root/backup/ > /root/backup/backup.xbstream
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To stream and compress the backup:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-stream=xbstream \-\-compress /root/backup/ > /root/backup/backup.xbstream
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To unpack the backup to the /root/backup/ directory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ xbstream \-x <  backup.xbstream \-C /root/backup/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To send the compressed backup to another host and unpack it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-compress \-\-stream=xbstream /root/backup/ | ssh user@otherhost "xbstream \-x \-C /root/backup/"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Examples using tar
.sp
Store the complete backup directly to a tar archive:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-stream=tar /root/backup/ > /root/backup/out.tar
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To send the tar archive to another host:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-stream=tar ./ | ssh user@destination \e "cat \- > /data/backups/backup.tar"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
To extract \fIPercona XtraBackup\fP\(aqs archive you \fBmust\fP use tar with \fB\-i\fP option:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&.. code\-block:: bash
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
$ tar \-xizf backup.tar.gz
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Compress with your preferred compression tool:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-stream=tar ./ | gzip \- > backup.tar.gz
$ innobackupex \-\-stream=tar ./ | bzip2 \- > backup.tar.bz2
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that the streamed backup will need to be prepared before
restoration. Streaming mode does not prepare the backup.
.SS Taking Backups in Replication Environments
.sp
There are options specific to back up from a replication replica.
.SS \fIinnobackupex \-\-slave\-info\fP
.sp
This option is useful when backing up a replication replica server. It prints the
binary log position and name of the source server. It also writes this
information to the \fIxtrabackup_slave_info\fP file as a \fBCHANGE MASTER\fP
statement.
.sp
This is useful for setting up a new replica for this source can be set up by
starting a replica server on this backup and issuing the statement saved in the
\fIxtrabackup_slave_info\fP file. More details of this procedure can be found
in replication_howto\&.
.SS \fIinnobackupex \-\-safe\-slave\-backup\fP
.sp
In order to assure a consistent replication state, this option stops the replica
SQL thread and waits to start backing up until \fBSlave_open_temp_tables\fP in
\fBSHOW STATUS\fP is zero. If there are no open temporary tables, the backup will
take place, otherwise the SQL thread will be started and stopped until there are
no open temporary tables. The backup will fail if \fBSlave_open_temp_tables\fP
does not become zero after \fIinnobackupex \-\-safe\-slave\-backup\-timeout\fP
seconds (defaults to 300 seconds). The replica SQL thread will be restarted when
the backup finishes.
.sp
Using this option is always recommended when taking backups from a replica server.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Make sure your replica is a true replica of the source before using it as a
source for backup. A good tool to validate a replica is \fI\%pt\-table\-checksum\fP\&.
.UNINDENT
.UNINDENT
.SS Accelerating the backup process
.SS Accelerating with \fIinnobackupex \-\-parallel\fP copy and \fI\-\-compress\-threads\fP
.sp
When performing a local backup or the streaming backup with \fIxbstream\fP option, multiple files can be copied concurrently by using the \fIinnobackupex \-\-parallel\fP option. This option specifies the number of threads created by \fIxtrabackup\fP to copy data files.
.sp
To take advantage of this option either the multiple tablespaces option must be enabled (\fIinnodb_file_per_table\fP) or the shared tablespace must be stored in multiple \fIibdata\fP files with the \fIinnodb_data_file_path\fP option.  Having multiple files for the database (or splitting one into many) doesn\(aqt have a measurable impact on performance.
.sp
As this feature is implemented \fBat a file level\fP, concurrent file transfer can sometimes increase I/O throughput when doing a backup on highly fragmented data files, due to the overlap of a greater number of random read requests. You should consider tuning the filesystem also to obtain the maximum performance (e.g. checking fragmentation).
.sp
If the data is stored on a single file, this option will have no effect.
.sp
To use this feature, simply add the option to a local backup, for example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-parallel=4 /path/to/backup
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
By using the \fIxbstream\fP in streaming backups you can additionally speed up the compression process by using the \fIinnobackupex \-\-compress\-threads\fP option. This option specifies the number of threads created by \fIxtrabackup\fP for  for parallel data compression. The default value for this option is 1.
.sp
To use this feature, simply add the option to a local backup, for example
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-stream=xbstream \-\-compress \-\-compress\-threads=4 ./ > backup.xbstream
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Before applying logs, compressed files will need to be uncompressed.
.SS Accelerating with \fIinnobackupex \-\-rsync\fP
.sp
In order to speed up the backup process and to minimize the time \fBFLUSH TABLES WITH READ LOCK\fP is blocking the writes, option \fIinnobackupex \-\-rsync\fP should be used. When this option is specified, \fIinnobackupex\fP uses \fBrsync\fP to copy all non\-InnoDB files instead of spawning a separate \fBcp\fP for each file, which can be much faster for servers with a large number of databases or tables. \fIinnobackupex\fP will call the \fBrsync\fP twice, once before the \fBFLUSH TABLES WITH READ LOCK\fP and once during to minimize the time the read lock is being held. During the second \fBrsync\fP call, it will only synchronize the changes to non\-transactional data (if any) since the first call performed before the \fBFLUSH TABLES WITH READ LOCK\fP\&. Note that \fIPercona XtraBackup\fP will use \fI\%Backup locks\fP where available as a lightweight alternative to \fBFLUSH TABLES WITH READ LOCK\fP\&. This feature is available in \fIPercona Server for MySQL\fP 5.6+. \fIPercona XtraBackup\fP uses this automatically to copy non\-InnoDB data to avoid blocking DML queries that modify InnoDB tables.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
This option cannot be used together with the \fIinnobackupex \-\-stream\fP option.
.UNINDENT
.UNINDENT
.SS Throttling backups with \fIinnobackupex\fP
.sp
Although \fIinnobackupex\fP does not block your database\(aqs operation, any backup can
add load to the system being backed up. On systems that do not have much spare
I/O capacity, it might be helpful to throttle the rate at which \fIinnobackupex\fP
reads and writes \fIInnoDB\fP data. You can do this with the
\fIinnobackupex \-\-throttle\fP option.
.sp
This option is passed directly to \fIxtrabackup\fP binary and only limits the
operations on the logs and files of \fIInnoDB\fP tables. It doesn\(aqt have an effect
on reading or writing files from tables with other storage engine.
.sp
One way of checking the current I/O operations at a system is with
\fIiostat\fP command. See throttling_backups for details of how
throttling works.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fIinnobackupex \-\-throttle\fP option works only during the backup phase,
i.e. it will not work with \fIinnobackupex \-\-apply\-log\fP and
\fIinnobackupex \-\-copy\-back\fP options.
.UNINDENT
.UNINDENT
.sp
The \fIinnobackupex \-\-throttle\fP option is similar to the \fB\-\-sleep\fP
option in \fBmysqlbackup\fP and should be used instead of it, as \fB\-\-sleep\fP will
be ignored.
.SS Restoring Individual Tables
.sp
In server versions prior to 5.6, it is not possible to copy tables between
servers by copying the files, even with \fIinnodb_file_per_table\fP\&. However,
with the \fIPercona XtraBackup\fP, you can export individual tables from any
\fIInnoDB\fP database, and import them into \fIPercona Server\fP with \fIXtraDB\fP or
\fIMySQL\fP 5.6 (The source doesn\(aqt have to be \fIXtraDB\fP or or \fIMySQL\fP 5.6, but the
destination does). This only works on individual \fI\&.ibd\fP files, and cannot
export a table that is not contained in its own \fI\&.ibd\fP file.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
If you\(aqre running \fIPercona Server\fP version older than 5.5.10\-20.1, variable
\fI\%innodb_expand_import\fP
should be used instead of \fI\%innodb_import_table_from_xtrabackup\fP\&.
.UNINDENT
.UNINDENT
.SS Exporting tables
.sp
Exporting is done in the preparation stage, not at the moment of creating the
backup. Once a full backup is created, prepare it with the
\fIinnobackupex \-\-export\fP option:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-apply\-log \-\-export /path/to/backup
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will create for each \fIInnoDB\fP with its own tablespace a file with
\fI\&.exp\fP extension. An output of this procedure would contain:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&..
xtrabackup: export option is specified.
xtrabackup: export metadata of table \(aqmydatabase/mytable\(aq to file
\(ga./mydatabase/mytable.exp\(ga (1 indexes)
\&..
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now you should see a \fI\&.exp\fP file in the target directory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ find /data/backups/mysql/ \-name export_test.*
/data/backups/mysql/test/export_test.exp
/data/backups/mysql/test/export_test.ibd
/data/backups/mysql/test/export_test.cfg
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
These three files are all you need to import the table into a server running
\fIPercona Server for MySQL\fP with XtraDB or \fIMySQL\fP 5.6.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fIMySQL\fP uses \fB\&.cfg\fP file which contains \fIInnoDB\fP dictionary dump in special
format. This format is different from the \fB\&.exp\fP one which is used in
XtraDB for the same purpose. Strictly speaking, a \fB\&.cfg\fP file is \fBnot\fP
required to import a tablespace to \fIMySQL\fP 5.6 or \fIPercona Server for MySQL\fP 5.6. A
tablespace will be imported successfully even if it is from another server,
but \fIInnoDB\fP will do schema validation if the corresponding \fB\&.cfg\fP file is
present in the same directory.
.UNINDENT
.UNINDENT
.sp
Each \fI\&.exp\fP (or \fB\&.cfg\fP)  file will be used for importing that table.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
InnoDB does a slow shutdown (i.e. full purge + change buffer merge) on
\-\-export, otherwise the tablespaces wouldn\(aqt be consistent and thus couldn\(aqt
be imported. All the usual performance considerations apply: sufficient buffer
pool (i.e. \-\-use\-memory, 100MB by default) and fast enough storage, otherwise
it can take a prohibitive amount of time for export to complete.
.UNINDENT
.UNINDENT
.SS Importing tables
.sp
To import a table to other server, first create a new table with the same
structure as the one that will be imported at that server:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
OTHERSERVER|mysql> CREATE TABLE mytable (...) ENGINE=InnoDB;
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
then discard its tablespace:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
OTHERSERVER|mysql> ALTER TABLE mydatabase.mytable DISCARD TABLESPACE;
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Next, copy \fImytable.ibd\fP and \fImytable.exp\fP ( or \fImytable.cfg\fP
if importing to \fIMySQL\fP 5.6) files to database\(aqs home, and import its
tablespace:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
OTHERSERVER|mysql> ALTER TABLE mydatabase.mytable IMPORT TABLESPACE;
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Set the owner and group of the files:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ chown \-R mysql:mysql /datadir/db_name/table_name.*
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After running this command, data in the imported table will be available.
.SS Point\-In\-Time recovery
.sp
Recovering up to particular moment in database\(aqs history can be done  with \fIinnobackupex\fP and the binary logs of the server.
.sp
Note that the binary log contains the operations that modified the database from a point in the past. You need a full \fIdatadir\fP as a base, and then you can apply a series of operations from the binary log to make the data match what it was at the point in time you want.
.sp
For taking the snapshot, we will use \fIinnobackupex\fP for a full backup:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex /path/to/backup \-\-no\-timestamp
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
(the \fIinnobackupex \-\-no\-timestamp\fP option is for convenience in this example) and we will prepare it to be ready for restoration:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-apply\-log /path/to/backup
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
For more details on these procedures, see creating_a_backup_ibk and preparing_a_backup_ibk\&.
.sp
Now, suppose that time has passed, and you want to restore the database to a certain point in the past, having in mind that there is the constraint of the point where the snapshot was taken.
.sp
To find out what is the situation of binary logging in the server, execute the following queries:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mysql> SHOW BINARY LOGS;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-+
| Log_name         | File_size |
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-+
| mysql\-bin.000001 |       126 |
| mysql\-bin.000002 |      1306 |
| mysql\-bin.000003 |       126 |
| mysql\-bin.000004 |       497 |
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-+
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
mysql> SHOW MASTER STATUS;
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
| mysql\-bin.000004 |      497 |              |                  |
+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The first query will tell you which files contain the binary log and the second one which file is currently being used to record changes, and the current position within it. Those files are stored usually in the \fIdatadir\fP (unless other location is specified when the server is started with the \fB\-\-log\-bin=\fP option).
.sp
To find out the position of the snapshot taken, see the \fIxtrabackup_binlog_info\fP at the backup\(aqs directory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ cat /path/to/backup/xtrabackup_binlog_info
mysql\-bin.000003      57
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will tell you which file was used at moment of the backup for the binary log and its position. That position will be the effective one when you restore the backup:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-copy\-back /path/to/backup
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
As the restoration will not affect the binary log files (you may need to adjust file permissions, see restoring_a_backup_ibk), the next step is extracting the queries from the binary log with \fImysqlbinlog\fP starting from the position of the snapshot and redirecting it to a file
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ mysqlbinlog /path/to/datadir/mysql\-bin.000003 /path/to/datadir/mysql\-bin.000004 \e
    \-\-start\-position=57 > mybinlog.sql
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Note that if you have multiple files for the binary log, as in the example, you have to extract the queries with one process, as shown above.
.sp
Inspect the file with the queries to determine which position or date corresponds to the point\-in\-time wanted. Once determined, pipe it to the server. Assuming the point is \fB11\-12\-25 01:00:00\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ mysqlbinlog /path/to/datadir/mysql\-bin.000003 /path/to/datadir/mysql\-bin.000004 \e
    \-\-start\-position=57 \-\-stop\-datetime="11\-12\-25 01:00:00" * mysql \-u root \-p
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
and the database will be rolled forward up to that Point\-In\-Time.
.SS Improved \fBFLUSH TABLES WITH READ LOCK\fP handling
.sp
When taking backups, \fBFLUSH TABLES WITH READ LOCK\fP is being used before the
non\-InnoDB files are being backed up to ensure backup is being
consistent. \fBFLUSH TABLES WITH READ LOCK\fP can be run even though there may be
a running query that has been executing for hours. In this case everything will
be locked up in \fBWaiting for table flush\fP or \fBWaiting for master to send
event\fP states. Killing the \fBFLUSH TABLES WITH READ LOCK\fP does not correct
this issue either. In this case the only way to get the server operating
normally again is to kill off the long running queries that blocked it to begin
with. This means that if there are long running queries \fBFLUSH TABLES WITH READ
LOCK\fP can get stuck, leaving server in read\-only mode until waiting for these
queries to complete.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
All described in this section has no effect when backup locks are
used. \fIPercona XtraBackup\fP will use \fI\%Backup locks\fP
where available as a lightweight alternative to \fBFLUSH TABLES WITH READ
LOCK\fP\&. This feature is available in \fIPercona Server for MySQL\fP 5.6+. \fIPercona
XtraBackup\fP uses this automatically to copy non\-InnoDB data to avoid blocking
DML queries that modify InnoDB tables.
.UNINDENT
.UNINDENT
.sp
In order to prevent this from happening two things have been implemented:
.INDENT 0.0
.IP \(bu 2
\fIinnobackupex\fP can wait for a good moment to issue the global lock.
.IP \(bu 2
\fIinnobackupex\fP can kill all or only SELECT queries which are preventing the
global lock from being acquired
.UNINDENT
.SS Waiting for queries to finish
.sp
Good moment to issue a global lock is the moment when there are no long queries
running. But waiting for a good moment to issue the global lock for extended
period of time isn\(aqt always good approach, as it can extend the time needed for
backup to take place. To prevent \fIinnobackupex\fP from waiting to issue \fBFLUSH
TABLES WITH READ LOCK\fP for too long, new option has been implemented:
\fIinnobackupex \-\-ftwrl\-wait\-timeout\fP option can be used to limit the
waiting time. If the good moment to issue the lock did not happen during this
time, \fIinnobackupex\fP will give up and exit with an error message and backup will
not be taken. Zero value for this option turns off the feature (which is
default).
.sp
Another possibility is to specify the type of query to wait on. In this case
\fIinnobackupex \-\-ftwrl\-wait\-query\-type\fP\&. Possible values are \fBall\fP and
\fBupdate\fP\&. When \fBall\fP is used \fIinnobackupex\fP will wait for all long running
queries (execution time longer than allowed by \fIinnobackupex
\-\-ftwrl\-wait\-threshold\fP) to finish before running the \fBFLUSH TABLES WITH READ
LOCK\fP\&. When \fBupdate\fP is used \fIinnobackupex\fP will wait on
\fBUPDATE/ALTER/REPLACE/INSERT\fP queries to finish.
.sp
Although time needed for specific query to complete is hard to predict, we can
assume that queries that are running for a long time already will likely not be
completed soon, and queries which are running for a short time will likely be
completed shortly. \fIinnobackupex\fP can use the value of \fIinnobackupex
\-\-ftwrl\-wait\-threshold\fP option to specify which query is long running and will
likely block global lock for a while. In order to use this option xtrabackup
user should have \fBPROCESS\fP and \fBSUPER\fP privileges.
.SS Killing the blocking queries
.sp
Second option is to kill all the queries which prevent global lock from being
acquired. In this case all the queries which run longer than \fBFLUSH TABLES WITH
READ LOCK\fP are possible blockers. Although all queries can be killed,
additional time can be specified for the short running queries to complete. This
can be specified by \fIinnobackupex \-\-kill\-long\-queries\-timeout\fP
option. This option specifies the time for queries to complete, after the value
is reached, all the running queries will be killed. Default value is zero, which
turns this feature off.
.sp
\fIinnobackupex \-\-kill\-long\-query\-type\fP option can be used to specify all
or only \fBSELECT\fP queries that are preventing global lock from being
acquired. In order to use this option xtrabackup user should have
\fBPROCESS\fP and \fBSUPER\fP privileges.
.SS Options summary
.INDENT 0.0
.IP \(bu 2
\fIinnobackupex \-\-ftwrl\-wait\-timeout\fP (seconds) \- how long to wait for a
good moment. Default is 0, not to wait.
.IP \(bu 2
\fIinnobackupex \-\-ftwrl\-wait\-query\-type\fP \- which long queries
should be finished before \fBFLUSH TABLES WITH READ LOCK\fP is run. Default is
all.
.IP \(bu 2
\fIinnobackupex \-\-ftwrl\-wait\-threshold\fP (seconds) \- how long query
should be running before we consider it long running and potential blocker of
global lock.
.IP \(bu 2
\fIinnobackupex \-\-kill\-long\-queries\-timeout\fP (seconds) \- how many time
we give for queries to complete after \fBFLUSH TABLES WITH READ LOCK\fP is
issued before start to kill. Default if \fB0\fP, not to kill.
.IP \(bu 2
\fIinnobackupex \-\-kill\-long\-query\-type\fP \- which queries
should be killed once \fBkill\-long\-queries\-timeout\fP has expired.
.UNINDENT
.SS Example
.sp
Running the \fIinnobackupex\fP with the following options will cause \fIinnobackupex\fP
to spend no longer than 3 minutes waiting for all queries older than 40 seconds
to complete.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ innobackupex \-\-ftwrl\-wait\-threshold=40 \-\-ftwrl\-wait\-query\-type=all \-\-ftwrl\-wait\-timeout=180 \-\-kill\-long\-queries\-timeout=20 \-\-kill\-long\-query\-type=all /data/backups/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After \fBFLUSH TABLES WITH READ LOCK\fP is issued, \fIinnobackupex\fP will wait 20
seconds for lock to be acquired. If lock is still not acquired after 20 seconds,
it will kill all queries which are running longer that the \fBFLUSH TABLES WITH
READ LOCK\fP\&.
.SS Store backup history on the server
.sp
\fIPercona XtraBackup\fP supports storing the backups history on the server. This feature was implemented in \fIPercona XtraBackup\fP 2.2. Storing backup history on the server was implemented to provide users with additional information about backups that are being taken. Backup history information will be stored in the \fI\%PERCONA_SCHEMA.XTRABACKUP_HISTORY\fP table.
.sp
To use this feature three new \fIinnobackupex\fP options have been implemented:
.INDENT 0.0
.IP \(bu 2
\fIinnobackupex \-\-history\fP =<name> : This option enables the history feature and allows the user to specify a backup series name that will be placed within the history record.
.IP \(bu 2
\fIinnobackupex \-\-incremental\-history\-name\fP =<name> : This option allows an incremental backup to be made based on a specific history series by name. \fIinnobackupex\fP will search the history table looking for the most recent (highest \fBto_lsn\fP) backup in the series and take the \fBto_lsn\fP value to use as it\(aqs starting lsn. This is mutually exclusive with \fIinnobackupex \-\-incremental\-history\-uuid\fP, \fIinnobackupex \-\-incremental\-basedir\fP and \fIinnobackupex \-\-incremental\-lsn\fP options. If no valid LSN can be found (no series by that name) \fIinnobackupex\fP will return with an error.
.IP \(bu 2
\fIinnobackupex \-\-incremental\-history\-uuid\fP =<uuid> : Allows an incremental backup to be made based on a specific history record identified by UUID. \fIinnobackupex\fP will search the history table looking for the record matching UUID and take the \fBto_lsn\fP value to use as it\(aqs starting LSN. This options is mutually exclusive with \fIinnobackupex \-\-incremental\-basedir\fP, \fIinnobackupex \-\-incremental\-lsn\fP and \fIinnobackupex \-\-incremental\-history\-name\fP options. If no valid LSN can be found (no record by that UUID or missing \fBto_lsn\fP), \fIinnobackupex\fP will return with an error.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Backup that\(aqs currently being performed will \fBNOT\fP exist in the xtrabackup_history table within the resulting backup set as the record will not be added to that table until after the backup has been taken.
.UNINDENT
.UNINDENT
.sp
If you want access to backup history outside of your backup set in the case of some catastrophic event, you will need to either perform a \fBmysqldump\fP, partial backup or \fBSELECT\fP * on the history table after \fIinnobackupex\fP completes and store the results with you backup set.
.SS Privileges
.sp
User performing the backup will need following privileges:
.INDENT 0.0
.IP \(bu 2
\fBCREATE\fP privilege in order to create the \fI\%PERCONA_SCHEMA.xtrabackup_history\fP database and table.
.IP \(bu 2
\fBINSERT\fP privilege in order to add history records to the \fI\%PERCONA_SCHEMA.xtrabackup_history\fP table.
.IP \(bu 2
\fBSELECT\fP privilege in order to use \fIinnobackupex \-\-incremental\-history\-name\fP or \fIinnobackupex \-\-incremental\-history\-uuid\fP in order for the feature to look up the \fBinnodb_to_lsn\fP values in the  \fI\%PERCONA_SCHEMA.xtrabackup_history\fP table.
.UNINDENT
.SS PERCONA_SCHEMA.XTRABACKUP_HISTORY table
.sp
This table contains the information about the previous server backups. Information about the backups will only be written if the backup was taken with \fIinnobackupex \-\-history\fP option.
.TS
center;
|l|l|.
_
T{
Column Name
T}	T{
Description
T}
_
T{
uuid
T}	T{
Unique backup id
T}
_
T{
name
T}	T{
User provided name of backup series. There may be multiple entries with the same name used to identify related backups in a series.
T}
_
T{
tool_name
T}	T{
Name of tool used to take backup
T}
_
T{
tool_command
T}	T{
Exact command line given to the tool with \-\-password and \-\-encryption_key obfuscated
T}
_
T{
tool_version
T}	T{
Version of tool used to take backup
T}
_
T{
ibbackup_version
T}	T{
Version of the xtrabackup binary used to take backup
T}
_
T{
server_version
T}	T{
Server version on which backup was taken
T}
_
T{
start_time
T}	T{
Time at the start of the backup
T}
_
T{
end_time
T}	T{
Time at the end of the backup
T}
_
T{
lock_time
T}	T{
Amount of time, in seconds, spent calling and holding locks for \fBFLUSH TABLES WITH READ LOCK\fP
T}
_
T{
binlog_pos
T}	T{
Binlog file and position at end of \fBFLUSH TABLES WITH READ LOCK\fP
T}
_
T{
innodb_from_lsn
T}	T{
LSN at beginning of backup which can be used to determine prior backups
T}
_
T{
innodb_to_lsn
T}	T{
LSN at end of backup which can be used as the starting lsn for the next incremental
T}
_
T{
partial
T}	T{
Is this a partial backup, if \fBN\fP that means that it\(aqs the full backup
T}
_
T{
incremental
T}	T{
Is this an incremental backup
T}
_
T{
format
T}	T{
Description of result format (\fBfile\fP, \fBtar\fP, \fBxbstream\fP)
T}
_
T{
compressed
T}	T{
Is this a compressed backup
T}
_
T{
encrypted
T}	T{
Is this an encrypted backup
T}
_
.TE
.SS Limitations
.INDENT 0.0
.IP \(bu 2
\fIinnobackupex \-\-history\fP option must be specified only on the innobackupex command line and not within a configuration file in order to be effective.
.IP \(bu 2
\fIinnobackupex \-\-incremental\-history\-name\fP and \fIinnobackupex \-\-incremental\-history\-uuid\fP options must be specified only on the innobackupex command line and not within a configuration file in order to be effective.
.UNINDENT
.SH IMPLEMENTATION
.SS How innobackupex Works
.sp
From \fIPercona XtraBackup\fP version 2.3 \fIinnobackupex\fP is has been
rewritten in \fIC\fP and set up as a symlink to the
\fIxtrabackup\fP\&. innobackupex supports all features and syntax as 2.2
version did, but it is now deprecated and will be removed in next major
release. Syntax for new features will not be added to the innobackupex, only to
the xtrabackup.
.sp
The following describes the rationale behind \fIinnobackupex\fP actions.
.SS Making a Backup
.sp
If no mode is specified, innobackupex will assume the backup mode.
.sp
By default, it runs \fIxtrabackup\fP and lets it copy the
InnoDB data files. When \fIxtrabackup\fP finishes that,
\fIinnobackupex\fP sees it create the \fIxtrabackup_suspended_2\fP file
and executes \fBFLUSH TABLES WITH READ LOCK\fP\&. \fIxtrabackup\fP will use
\fI\%Backup locks\fP
where available as a lightweight alternative to \fBFLUSH TABLES WITH READ
LOCK\fP\&. This feature is available in \fIPercona Server\fP 5.6+. \fIPercona XtraBackup\fP
uses this automatically to copy non\-InnoDB data to avoid blocking DML queries
that modify InnoDB tables. Then it begins copying the rest of the files.
.sp
\fIinnobackupex\fP will then check \fIMySQL\fP variables to determine which features are
supported by server. Special interest are backup locks, changed page bitmaps,
GTID mode, etc. If everything goes well, the binary is started as a child
process.
.sp
\fIinnobackupex\fP will wait for replicas in a replication setup if the option
\fIinnobackupex \-\-safe\-slave\-backup\fP is set and will flush all tables with
\fBREAD LOCK\fP, preventing all \fIMyISAM\fP tables from writing (unless option
\fIinnobackupex \-\-no\-lock\fP is specified).
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Locking is done only for MyISAM and other non\-InnoDB tables, and only
\fBafter\fP \fIPercona XtraBackup\fP is finished backing up all InnoDB/XtraDB data
and logs. \fIPercona XtraBackup\fP will use \fBbackup locks\fP
where available as a lightweight alternative to \fBFLUSH TABLES WITH READ
LOCK\fP\&. This feature is available in \fIPercona Server for MySQL\fP 5.6+. \fIPercona
XtraBackup\fP uses this automatically to copy non\-InnoDB data to avoid blocking
DML queries that modify InnoDB tables.
.UNINDENT
.UNINDENT
.sp
Once this is done, the backup of the files will begin. It will backup
\fI\&.frm\fP, \fI\&.MRG\fP, \fI\&.MYD\fP, \fI\&.MYI\fP, \fI\&.TRG\fP,
\fI\&.TRN\fP, \fI\&.ARM\fP, \fI\&.ARZ\fP, \fI\&.CSM\fP, \fI\&.CSV\fP, \fB\&.par\fP,
and \fI\&.opt\fP files.
.sp
When all the files are backed up, it resumes \fIibbackup\fP and wait until
it finishes copying the transactions done while the backup was done. Then, the
tables are unlocked, the replica is started (if the option \fIinnobackupex \-\-safe\-slave\-backup\fP
was used) and the connection with the server is
closed. Then, it removes the \fIxtrabackup_suspended_2\fP file and permits
\fIxtrabackup\fP to exit.
.sp
It will also create the following files in the directory of the backup:
.INDENT 0.0
.TP
.B \fIxtrabackup_checkpoints\fP
containing the \fILSN\fP and the type of backup;
.TP
.B \fIxtrabackup_binlog_info\fP
containing the position of the binary log at the moment of backing up;
.TP
.B \fIxtrabackup_binlog_pos_innodb\fP
containing the position of the binary log at the moment of backing up relative to \fIInnoDB\fP transactions;
.TP
.B \fIxtrabackup_slave_info\fP
containing the MySQL binlog position of the source server in a replication setup via \fBSHOW SLAVE STATUS\fP if the \fIinnobackupex \-\-slave\-info\fP option is passed;
.TP
.B \fIbackup\-my.cnf\fP
containing only the \fImy.cnf\fP options required for the backup. For example, innodb_data_file_path, innodb_log_files_in_group, innodb_log_file_size, innodb_fast_checksum, innodb_page_size, innodb_log_block_size;
.TP
.B \fIxtrabackup_binary\fP
containing the binary used for the backup;
.TP
.B \fImysql\-stderr\fP
containing the \fBSTDERR\fP of \fImysqld\fP during the process and
.TP
.B \fImysql\-stdout\fP
containing the \fBSTDOUT\fP of the server.
.UNINDENT
.sp
Finally, the binary log position will be printed to \fBSTDERR\fP and \fIinnobackupex\fP will exit returning 0 if all went OK.
.sp
Note that the \fBSTDERR\fP of \fIinnobackupex\fP is not written in any file. You will have to redirect it to a file, e.g., \fBinnobackupex OPTIONS 2> backupout.log\fP\&.
.SS Restoring a backup
.sp
To restore a backup with \fIinnobackupex\fP the \fIinnobackupex \-\-copy\-back\fP option must be used.
.sp
\fIinnobackupex\fP will read from the \fImy.cnf\fP the variables \fIdatadir\fP,
\fIinnodb_data_home_dir\fP, \fIinnodb_data_file_path\fP,
\fIinnodb_log_group_home_dir\fP and check that the directories exist.
.sp
It will copy the \fIMyISAM\fP tables, indexes, etc. (\fI\&.frm\fP, \fI\&.MRG\fP,
\fI\&.MYD\fP, \fI\&.MYI\fP, \fI\&.TRG\fP, \fI\&.TRN\fP, \fI\&.ARM\fP,
\fI\&.ARZ\fP, \fI\&.CSM\fP, \fI\&.CSV\fP, \fBpar\fP and \fI\&.opt\fP files) first,
\fIInnoDB\fP tables and indexes next and the log files at last. It will preserve
file\(aqs attributes when copying them, you may have to change the files\(aq ownership
to \fBmysql\fP before starting the database server, as they will be owned by the
user who created the backup.
.sp
Alternatively, the \fIinnobackupex \-\-move\-back\fP option may be used to restore a
backup. This option is similar to \fIinnobackupex \-\-copy\-back\fP with the only
difference that instead of copying files it moves them to their target
locations. As this option removes backup files, it must be used with
caution. It is useful in cases when there is not enough free disk space
to hold both data files and their backup copies.
.SH REFERENCES
.SS The \fIinnobackupex\fP Option Reference
.sp
This page documents all of the command\-line options for the \fIinnobackupex\fP\&.
.SS Options
.INDENT 0.0
.TP
.B \-\-apply\-log
Prepare a backup in \fBBACKUP\-DIR\fP by applying the transaction log file named
\fIxtrabackup_logfile\fP located in the same directory. Also, create new
transaction logs. The InnoDB configuration is read from the file
\fIbackup\-my.cnf\fP created by \fIinnobackupex\fP when the backup was
made. innobackupex \-\-apply\-log uses InnoDB configuration from
\fBbackup\-my.cnf\fP by default, or from \-\-defaults\-file, if specified. InnoDB
configuration in this context means server variables that affect data format,
i.e. \fBinnodb_page_size\fP, \fBinnodb_log_block_size\fP, etc. Location\-related
variables, like \fBinnodb_log_group_home_dir\fP or \fIinnodb_data_file_path\(ga\fP are
always ignored by \-\-apply\-log, so preparing a backup always works with data
files from the backup directory, rather than any external ones.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-backup\-locks
This option controls if backup locks should be used instead of \fBFLUSH TABLES
WITH READ LOCK\fP on the backup stage. The option has no effect when backup
locks are not supported by the server. This option is enabled by default,
disable with \fI\-\-no\-backup\-locks\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-backup\-locks
Explicity disables the option \fI\-\-backup\-locks\fP which is enabled by
default.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-close\-files
Do not keep files opened. This option is passed directly to xtrabackup. When
xtrabackup opens tablespace it normally doesn\(aqt close its file handle in
order to handle the DDL operations correctly. However, if the number of
tablespaces is really huge and can not fit into any limit, there is an option
to close file handles once they are no longer accessed. \fIPercona XtraBackup\fP
can produce inconsistent backups with this option enabled. Use at your own
risk.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-compress
This option instructs xtrabackup to compress backup copies of InnoDB data
files. It is passed directly to the xtrabackup child process. See the
\fIxtrabackup\fP documentation for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-compress\-threads=#
This option specifies the number of worker threads that will be used for
parallel compression. It is passed directly to the xtrabackup child
process. See the \fIxtrabackup\fP documentation for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-compress\-chunk\-size=#
This option specifies the size of the internal working buffer for each
compression thread, measured in bytes. It is passed directly to the
xtrabackup child process. The default value is 64K. See the
\fIxtrabackup\fP documentation for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-copy\-back
Copy all the files in a previously made backup from the backup directory to
their original locations. \fIPercona XtraBackup\fP \fIinnobackupex \-\-copy\-back\fP
option will not copy over existing files unless
\fIinnobackupex \-\-force\-non\-empty\-directories\fP option is specified.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-databases=LIST
This option specifies the list of databases that \fIinnobackupex\fP should back
up. The option accepts a string argument or path to file that contains the
list of databases to back up. The list is of the form
"databasename1[.table_name1] databasename2[.table_name2] . . .". If this
option is not specified, all databases containing \fIMyISAM\fP and \fIInnoDB\fP
tables will be backed up. Please make sure that \-\-databases contains all of
the \fIInnoDB\fP databases and tables, so that all of the innodb.frm files are
also backed up. In case the list is very long, this can be specified in a
file, and the full path of the file can be specified instead of the
list. (See option \-\-tables\-file.)
.UNINDENT
.INDENT 0.0
.TP
.B \-\-decompress
Decompresses all files with the .qp extension in a backup previously made
with the \fIinnobackupex \-\-compress\fP option. The \fIinnobackupex
\-\-parallel\fP option will allow multiple files to be decrypted and/or
decompressed simultaneously. In order to decompress, the qpress utility MUST
be installed and accessible within the path. \fIPercona XtraBackup\fP doesn\(aqt
automatically remove the compressed files. In order to clean up the backup
directory users should remove the \fB*.qp\fP files manually.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-decrypt=ENCRYPTION\-ALGORITHM
Decrypts all files with the .xbcrypt extension in a backup previously made
with \-\-encrypt option. The \fIinnobackupex \-\-parallel\fP option will
allow multiple files to be decrypted and/or decompressed simultaneously.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-defaults\-file=[MY.CNF]
This option accepts a string argument that specifies what file to read the
default MySQL options from. Must be given as the first option on the
command\-line.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-defaults\-extra\-file=[MY.CNF]
This option specifies what extra file to read the default \fIMySQL\fP options
from before the standard defaults\-file. Must be given as the first option on
the command\-line.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-defaults\-group=GROUP\-NAME
This option accepts a string argument that specifies the group which should
be read from the configuration file. This is needed if you use
mysqld_multi. This can also be used to indicate groups other than mysqld and
xtrabackup.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-encrypt=ENCRYPTION_ALGORITHM
This option instructs xtrabackup to encrypt backup copies of InnoDB data
files using the algorithm specified in the ENCRYPTION_ALGORITHM. It is passed
directly to the xtrabackup child process. See the \fIxtrabackup\fP
documentation for more details.
.sp
Currently, the following algorithms are supported: \fBAES128\fP,
\fBAES192\fP and \fBAES256\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-encrypt\-key=ENCRYPTION_KEY
This option instructs xtrabackup to use the given proper length encryption
key as the ENCRYPTION_KEY when using the \-\-encrypt option. It is passed
directly to the xtrabackup child process. See the \fIxtrabackup\fP
documentation for more details.
.sp
It is not recommended to use this option where there is uncontrolled access
to the machine as the command line and thus the key can be viewed as part of
the process info.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-encrypt\-key\-file=ENCRYPTION_KEY_FILE
This option instructs xtrabackup to use the encryption key stored in the
given ENCRYPTION_KEY_FILE when using the \-\-encrypt option. It is passed
directly to the xtrabackup child process. See the \fIxtrabackup\fP
documentation for more details.
.sp
The file must be a simple binary (or text) file that contains exactly the key
to be used.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-encrypt\-threads=#
This option specifies the number of worker threads that will be used for
parallel encryption. It is passed directly to the xtrabackup child
process. See the \fIxtrabackup\fP documentation for more details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-encrypt\-chunk\-size=#
This option specifies the size of the internal working buffer for each
encryption thread, measured in bytes. It is passed directly to the xtrabackup
child process. See the \fIxtrabackup\fP documentation for more details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-export
This option is passed directly to \fIxtrabackup \-\-export\fP option. It
enables exporting individual tables for import into another server. See the
\fIxtrabackup\fP documentation for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-extra\-lsndir=DIRECTORY
This option accepts a string argument that specifies the directory in which
to save an extra copy of the \fIxtrabackup_checkpoints\fP file. It is
passed directly to \fIxtrabackup\fP\(aqs \fIinnobackupex \-\-extra\-lsndir\fP option. See the \fIxtrabackup\fP documentation for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-force\-non\-empty\-directories
When specified, it makes \fIinnobackupex \-\-copy\-back\fP option or
\fIinnobackupex \-\-move\-back\fP option transfer files to non\-empty
directories. No existing files will be overwritten. If \-\-copy\-back
or \-\-move\-back has to copy a file from the backup directory which already
exists in the destination directory, it will still fail with an error.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-galera\-info
This options creates the \fBxtrabackup_galera_info\fP file which contains the
local node state at the time of the backup. Option should be used when
performing the backup of Percona\-XtraDB\-Cluster. Has no effect when backup
locks are used to create the backup.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-help
This option displays a help screen and exits.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-history=NAME
This option enables the tracking of backup history in the
\fBPERCONA_SCHEMA.xtrabackup_history\fP table. An optional history series name
may be specified that will be placed with the history record for the current
backup being taken.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-host=HOST
This option accepts a string argument that specifies the host to use when
connecting to the database server with TCP/IP. It is passed to the mysql
child process without alteration. See \fImysql \-\-help\fP for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ibbackup=IBBACKUP\-BINARY
This option specifies which \fIxtrabackup\fP binary should be used. The option
accepts a string argument. IBBACKUP\-BINARY should be the command used to run
\fIPercona XtraBackup\fP\&. The option can be useful if the \fIxtrabackup\fP binary is
not in your search path or working directory. If this option is not
specified, \fIinnobackupex\fP attempts to determine the binary to use
automatically.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-include=REGEXP
This option is a regular expression to be matched against table names in
\fBdatabasename.tablename\fP format. It is passed directly to xtrabackup\(aqs
\fIxtrabackup \-\-tables\fP option. See the \fIxtrabackup\fP
documentation for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-incremental
This option tells \fIxtrabackup\fP to create an incremental backup, rather than a
full one. It is passed to the \fIxtrabackup\fP child process. When this option is
specified, either \fIinnobackupex \-\-incremental\-lsn\fP or
\fIinnobackupex \-\-incremental\-basedir\fP can also be given. If neither option is
given, option \fIinnobackupex \-\-incremental\-basedir\fP is passed to
\fIxtrabackup\fP by default, set to the first timestamped backup
directory in the backup base directory.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-incremental\-basedir=DIRECTORY
This option accepts a string argument that specifies the directory containing
the full backup that is the base dataset for the incremental backup. It is
used with the \fIinnobackupex \-\-incremental\fP option.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-incremental\-dir=DIRECTORY
This option accepts a string argument that specifies the directory where the
incremental backup will be combined with the full backup to make a new full
backup. It is used with the \fIinnobackupex \-\-incremental\fP option.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-incremental\-history\-name=NAME
This option specifies the name of the backup series stored in the
PERCONA_SCHEMA.xtrabackup_history history record
to base an incremental backup on. Percona Xtrabackup will search the history
table looking for the most recent (highest innodb_to_lsn), successful backup
in the series and take the to_lsn value to use as the starting lsn for the
incremental backup. This will be mutually exclusive with
\fIinnobackupex \-\-incremental\-history\-uuid\fP, \fIinnobackupex \-\-incremental\-basedir\fP
and \fIinnobackupex \-\-incremental\-lsn\fP\&. If no
valid lsn can be found (no series by that name, no successful backups by that
name) xtrabackup will return with an error. It is used with the
\fIinnobackupex \-\-incremental\fP option.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-incremental\-history\-uuid=UUID
This option specifies the UUID of the specific history record stored in the
PERCONA_SCHEMA.xtrabackup_history to base an
incremental backup on. \fIinnobackupex
\-\-incremental\-history\-name\fP,:optionL\(gainnobackupex \-\-incremental\-basedir\(ga and
\fIinnobackupex \-\-incremental\-lsn\fP\&. If no valid lsn can be found (no
success record with that uuid) xtrabackup will return with an error. It is
used with the \fIinnobackupex \-\-incremental\fP option.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-incremental\-lsn=LSN
This option accepts a string argument that specifies the log sequence number
(\fILSN\fP) to use for the incremental backup. It is used with the
\fIinnobackupex \-\-incremental\fP option. It is used instead of specifying
\fIinnobackupex \-\-incremental\-basedir\fP\&. For databases created by \fIMySQL\fP and
\fIPercona Server\fP 5.0\-series versions, specify the as two 32\-bit integers in
high:low format. For databases created in 5.1 and later, specify the LSN as a
single 64\-bit integer.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-kill\-long\-queries\-timeout=SECONDS
This option specifies the number of seconds innobackupex waits between
starting \fBFLUSH TABLES WITH READ LOCK\fP and killing those queries that block
it. Default is 0 seconds, which means innobackupex will not attempt to kill
any queries. In order to use this option xtrabackup user should have
\fBPROCESS\fP and \fBSUPER\fP privileges. Where supported (Percona Server 5.6+)
xtrabackup will automatically use \fI\%Backup Locks\fP
as a lightweight alternative to \fBFLUSH TABLES WITH READ LOCK\fP to copy
non\-InnoDB data to avoid blocking DML queries that modify InnoDB tables.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-kill\-long\-query\-type=all|select
This option specifies which types of queries should be killed to unblock the
global lock. Default is "all".
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftwrl\-wait\-timeout=SECONDS
This option specifies time in seconds that innobackupex should wait for
queries that would block \fBFLUSH TABLES WITH READ LOCK\fP before running
it. If there are still such queries when the timeout expires, innobackupex
terminates with an error. Default is 0, in which case innobackupex does not
wait for queries to complete and starts \fBFLUSH TABLES WITH READ LOCK\fP
immediately. Where supported (Percona Server 5.6+) xtrabackup will
automatically use \fI\%Backup Locks\fP
as a lightweight alternative to \fBFLUSH TABLES WITH READ LOCK\fP to copy
non\-InnoDB data to avoid blocking DML queries that modify InnoDB tables.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftwrl\-wait\-threshold=SECONDS
This option specifies the query run time threshold which is used by
innobackupex to detect long\-running queries with a non\-zero value of
\fIinnobackupex \-\-ftwrl\-wait\-timeout\fP\&. \fBFLUSH TABLES WITH READ LOCK\fP
is not started until such long\-running queries exist. This option has no
effect if \-\-ftwrl\-wait\-timeout is 0. Default value is 60 seconds. Where
supported (Percona Server 5.6+) xtrabackup will automatically use \fI\%Backup
Locks\fP
as a lightweight alternative to \fBFLUSH TABLES WITH READ LOCK\fP to copy
non\-InnoDB data to avoid blocking DML queries that modify InnoDB tables.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftwrl\-wait\-query\-type=all|update
This option specifies which types of queries are allowed to complete before
innobackupex will issue the global lock. Default is all.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-log\-copy\-interval=#
This option specifies time interval between checks done by log copying thread
in milliseconds.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-move\-back
Move all the files in a previously made backup from the backup directory to
their original locations. As this option removes backup files, it must be
used with caution.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-lock
Use this option to disable table lock with \fBFLUSH TABLES WITH READ
LOCK\fP\&. Use it only if ALL your tables are InnoDB and you \fBDO NOT CARE\fP
about the binary log position of the backup. This option shouldn\(aqt be used if
there are any \fBDDL\fP statements being executed or if any updates are
happening on non\-InnoDB tables (this includes the system MyISAM tables in the
\fImysql\fP database), otherwise it could lead to an inconsistent backup. Where
supported (Percona Server 5.6+) xtrabackup will automatically use \fI\%Backup
Locks\fP
as a lightweight alternative to \fBFLUSH TABLES WITH READ LOCK\fP to copy
non\-InnoDB data to avoid blocking DML queries that modify InnoDB tables.  If
you are considering to use \fIinnobackupex \-\-no\-lock\fP because your backups are
failing to acquire the lock, this could be because of incoming replication
events preventing the lock from succeeding. Please try using
\fIinnobackupex \-\-safe\-slave\-backup\fP to momentarily stop the replication replica
thread, this may help the backup to succeed and you then don\(aqt need to resort
to using this option.  \fIxtrabackup_binlog_info\fP is not created
when \-\-no\-lock option is used (because \fBSHOW MASTER STATUS\fP may be
inconsistent), but under certain conditions
\fIxtrabackup_binlog_pos_innodb\fP can be used instead to get consistent
binlog coordinates as described in working_with_binlogs\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-timestamp
This option prevents creation of a time\-stamped subdirectory of the
\fBBACKUP\-ROOT\-DIR\fP given on the command line. When it is specified, the
backup is done in \fBBACKUP\-ROOT\-DIR\fP instead.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-version\-check
This option disables the version check. If you do not pass this option, the
automatic version check is enabled implicitly when 
.nf
|program|
.fi
 runs
in the \fB\-\-backup\fP mode. To disable the version check, explicitly pass
the \fB\-\-no\-version\-check\fP option when invoking 
.nf
|program|
.fi
\&.
.sp
When the automatic version check is enabled,|program| performs a
version check against the server on the backup stage after creating a server
connection. 
.nf
|program|
.fi
 sends the following information to the server:
.INDENT 7.0
.IP \(bu 2
MySQL flavour and version
.IP \(bu 2
Operating system name
.IP \(bu 2
Percona Toolkit version
.IP \(bu 2
Perl version
.UNINDENT
.sp
Each piece of information has a unique identifier which is an MD5 hash value
that Percona Toolkit uses to obtain statistics about how it is used. This value is
a random UUID; no client information is either collected or stored.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-parallel=NUMBER\-OF\-THREADS
This option accepts an integer argument that specifies the number of threads
the \fIxtrabackup\fP child process should use to back up files
concurrently.  Note that this option works on file level, that is, if you
have several .ibd files, they will be copied in parallel. If your tables are
stored together in a single tablespace file, it will have no effect. This
option will allow multiple files to be decrypted and/or decompressed
simultaneously. In order to decompress, the qpress utility MUST be installed
and accessable within the path. This process will remove the original
compressed/encrypted files and leave the results in the same location. It is
passed directly to xtrabackup\(aqs \fIxtrabackup \-\-parallel\fP option. See
the \fIxtrabackup\fP documentation for details
.UNINDENT
.INDENT 0.0
.TP
.B \-\-password=PASSWORD
This option accepts a string argument specifying the password to use when
connecting to the database. It is passed to the \fImysql\fP child
process without alteration. See \fImysql \-\-help\fP for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-port=PORT
This option accepts a string argument that specifies the port to use when
connecting to the database server with TCP/IP. It is passed to the
\fImysql\fP child process. It is passed to the \fImysql\fP child
process without alteration. See \fImysql \-\-help\fP for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rebuild\-indexes
This option only has effect when used together with the \fI\-\-apply\-log <innobackupex \-\-apply\-log>\fP
option and is passed directly to xtrabackup. When used, makes xtrabackup
rebuild all secondary indexes after applying the log. This option is normally
used to prepare compact backups. See the \fIxtrabackup\fP documentation
for more information.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rebuild\-threads=NUMBER\-OF\-THREADS
This option only has effect when used together with the \fIinnobackupex \-\-apply\-log\fP
and \fIinnobackupex \-\-rebuild\-indexes\fP option and is passed directly to
xtrabackup. When used, xtrabackup processes tablespaces in parallel with the
specified number of threads when rebuilding indexes. See the
\fIxtrabackup\fP documentation for more information.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-redo\-only
This option should be used when preparing the base full backup and when
merging all incrementals except the last one. It is passed directly to
xtrabackup\(aqs \fIxtrabackup \-\-apply\-log\-only\fP option. This forces
\fIxtrabackup\fP to skip the "rollback" phase and do a "redo" only. This
is necessary if the backup will have incremental changes applied to it
later. See the \fIxtrabackup\fP documentation for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rsync
Uses the \fIrsync\fP utility to optimize local file transfers. When this
option is specified, \fIinnobackupex\fP uses \fIrsync\fP to copy
all non\-InnoDB files instead of spawning a separate \fIcp\fP for each
file, which can be much faster for servers with a large number of databases
or tables.  This option cannot be used together with \fIinnobackupex \-\-stream\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-safe\-slave\-backup
When specified, innobackupex will stop the replica SQL thread just before
running \fBFLUSH TABLES WITH READ LOCK\fP and wait to start backup until
\fBSlave_open_temp_tables\fP in \fBSHOW STATUS\fP is zero. If there are no open
temporary tables, the backup will take place, otherwise the SQL thread will
be started and stopped until there are no open temporary tables. The backup
will fail if \fBSlave_open_temp_tables\fP does not become zero after
\fIinnobackupex \-\-safe\-slave\-backup\-timeout\fP seconds. The replica SQL
thread will be restarted when the backup finishes.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-safe\-slave\-backup\-timeout=SECONDS
How many seconds \fIinnobackupex \-\-safe\-slave\-backup\fP should wait for
\fBSlave_open_temp_tables\fP to become zero. Defaults to 300 seconds.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-slave\-info
This option is useful when backing up a replication replica server. It prints
the binary log position and name of the source server. It also writes this
information to the \fIxtrabackup_slave_info\fP file as a \fBCHANGE MASTER\fP
command. A new replica for this source can be set up by starting a replica server
on this backup and issuing a \fBCHANGE MASTER\fP command with the binary log
position saved in the \fIxtrabackup_slave_info\fP file.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-socket
This option accepts a string argument that specifies the socket to use when
connecting to the local database server with a UNIX domain socket. It is
passed to the mysql child process without alteration. See \fImysql
\-\-help\fP for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-stream=STREAMNAME
This option accepts a string argument that specifies the format in which to
do the streamed backup. The backup will be done to \fBSTDOUT\fP in the
specified format. Currently, supported formats are \fItar\fP and \fIxbstream\fP\&. Uses
xbstream, which is available in \fIPercona XtraBackup\fP
distributions. If you specify a path after this option, it will be interpreted
as the value of \fBtmpdir\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tables\-file=FILE
This option accepts a string argument that specifies the file in which there
are a list of names of the form \fBdatabase.table\fP, one per line. The option
is passed directly to \fIxtrabackup\fP \(aqs \fIinnobackupex \-\-tables\-file\fP
option.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-throttle=#
This option limits the number of chunks copied per second. The chunk size is
\fI10 MB\fP\&. To limit the bandwidth to \fI10 MB/s\fP, set the option to \fI1\fP:
\fI\-\-throttle=1\fP\&.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B More information about how to throttle a backup
throttling_backups
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tmpdir=DIRECTORY
This option accepts a string argument that specifies the location where a
temporary file will be stored. It may be used when \fIinnobackupex \-\-stream\fP is
specified. For these options, the transaction log will first be stored to a
temporary file, before streaming or copying to a remote host. This option
specifies the location where that temporary file will be stored. If the
option is not specified, the default is to use the value of \fBtmpdir\fP read
from the server configuration. innobackupex is passing the tmpdir value
specified in my.cnf as the \-\-target\-dir option to the xtrabackup binary. Both
[mysqld] and [xtrabackup] groups are read from my.cnf. If there is tmpdir in
both, then the value being used depends on the order of those group in
my.cnf.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-use\-memory=#
This option accepts a string argument that specifies the amount of memory in
bytes for \fIxtrabackup\fP to use for crash recovery while preparing a
backup. Multiples are supported providing the unit (e.g. 1MB, 1M, 1GB,
1G). It is used only with the option \fIinnobackupex \-\-apply\-log\fP\&. It is passed
directly to xtrabackup\(aqs \fIxtrabackup \-\-use\-memory\fP option. See the
\fIxtrabackup\fP documentation for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-user=USER
This option accepts a string argument that specifies the user (i.e., the
\fIMySQL\fP username used when connecting to the server) to login as, if that\(aqs
not the current user. It is passed to the mysql child process without
alteration. See \fImysql \-\-help\fP for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-version
This option displays the \fIinnobackupex\fP version and copyright notice and then
exits.
.UNINDENT
.SH AUTHOR
Percona LLC and/or its affiliates
.SH COPYRIGHT
2009-2022, Percona LLC and/or its affiliates
.\" Generated by docutils manpage writer.
.
