.\" Man page generated from reStructuredText.
.
.TH "XTRABACKUP" "1" "Dec 13, 2023" "2.4" "Percona XtraBackup"
.SH NAME
xtrabackup \- Percona XtraBackup 2.4 Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
The \fIxtrabackup\fP binary is a compiled C program that is linked with the \fIInnoDB\fP
libraries and the standard \fIMySQL\fP client libraries. The \fIInnoDB\fP libraries
provide functionality necessary to apply a log to data files, and the \fIMySQL\fP
client libraries provide command\-line option parsing, configuration file
parsing, and so on to give the binary a familiar look and feel.
.sp
The tool runs in either \fIxtrabackup \-\-backup\fP or
\fIxtrabackup \-\-prepare\fP mode, corresponding to the two main
functions it performs. There are several variations on these functions
to accomplish different tasks, and there are two less commonly used
modes, \fIxtrabackup \-\-stats\fP and \fIxtrabackup \-\-print\-param\fP\&.
.SH OTHER TYPES OF BACKUPS
.SS Incremental Backups
.sp
Both \fIxtrabackup\fP and innobackupex tools supports incremental backups, which
means that it can copy only the data that has changed since the last full
backup. You can perform many incremental backups between each full backup, so
you can set up a backup process such as a full backup once a week and an
incremental backup every day, or full backups every day and incremental backups
every hour.
.sp
Incremental backups work because each InnoDB page (usually 16kb in size)
contains a log sequence number, or \fILSN\fP\&. The \fILSN\fP is the system
version number for the entire database. Each page\(aqs \fILSN\fP shows how
recently it was changed. An incremental backup copies each page whose
\fILSN\fP is newer than the previous incremental or full backup\(aqs
\fILSN\fP\&. There are two algorithms in use to find the set of such pages to be
copied. The first one, available with all the server types and versions, is to
check the page \fILSN\fP directly by reading all the data pages. The second
one, available with \fIPercona Server for MySQL\fP, is to enable the \fI\%changed page tracking\fP
feature on the server, which will note the pages as they are being changed. This
information will be then written out in a compact separate so\-called bitmap
file. The \fIxtrabackup\fP binary will use that file to read only the data pages it
needs for the incremental backup, potentially saving many read requests. The
latter algorithm is enabled by default if the \fIxtrabackup\fP binary finds the
bitmap file. It is possible to specify \fIxtrabackup
\-\-incremental\-force\-scan\fP to read all the pages even if the bitmap data is
available.
.sp
Incremental backups do not actually compare the data files to the previous
backup\(aqs data files. In fact, you can use \fIxtrabackup \-\-incremental\-lsn\fP
to perform an incremental backup without even having the previous backup, if you
know its \fILSN\fP\&. Incremental backups simply read the pages and compare
their \fILSN\fP to the last backup\(aqs \fILSN\fP\&. You still need a full backup
to recover the incremental changes, however; without a full backup to act as a
base, the incremental backups are useless.
.SS Creating an Incremental Backup
.sp
To make an incremental backup, begin with a full backup as usual. The
\fIxtrabackup\fP binary writes a file called \fIxtrabackup_checkpoints\fP into the
backup\(aqs target directory. This file contains a line showing the \fBto_lsn\fP,
which is the database\(aqs \fILSN\fP at the end of the backup. Create the
full backup with a command such as the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
xtrabackup \-\-backup \-\-target\-dir=/data/backups/base \-\-datadir=/var/lib/mysql/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you look at the \fIxtrabackup_checkpoints\fP file, you should see some
contents similar to the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
backup_type = full\-backuped
from_lsn = 0
to_lsn = 1291135
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Now that you have a full backup, you can make an incremental backup based on
it. Use a command such as the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
xtrabackup \-\-backup \-\-target\-dir=/data/backups/inc1 \e
\-\-incremental\-basedir=/data/backups/base \-\-datadir=/var/lib/mysql/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fI/data/backups/inc1/\fP directory should now contain delta files, such
as \fIibdata1.delta\fP and \fItest/table1.ibd.delta\fP\&. These represent the
changes since the \fBLSN 1291135\fP\&. If you examine the
\fIxtrabackup_checkpoints\fP file in this directory, you should see something
similar to the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
backup_type = incremental
from_lsn = 1291135
to_lsn = 1291340
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The meaning should be self\-evident. It\(aqs now possible to use this directory as
the base for yet another incremental backup:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
xtrabackup \-\-backup \-\-target\-dir=/data/backups/inc2 \e
\-\-incremental\-basedir=/data/backups/inc1 \-\-datadir=/var/lib/mysql/
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Preparing the Incremental Backups
.sp
The \fIxtrabackup \-\-prepare\fP step for incremental backups is not the same
as for normal backups. In normal backups, two types of operations are performed
to make the database consistent: committed transactions are replayed from the
log file against the data files, and uncommitted transactions are rolled
back. You must skip the rollback of uncommitted transactions when preparing a
backup, because transactions that were uncommitted at the time of your backup
may be in progress, and it\(aqs likely that they will be committed in the next
incremental backup. You should use the \fIxtrabackup \-\-apply\-log\-only\fP
option to prevent the rollback phase.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
If you do not use the \fIxtrabackup \-\-apply\-log\-only\fP option to
prevent the rollback phase, then your incremental backups will be
useless. After transactions have been rolled back, further incremental
backups cannot be applied.
.UNINDENT
.UNINDENT
.sp
Beginning with the full backup you created, you can prepare it, and then apply
the incremental differences to it. Recall that you have the following backups:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/data/backups/base
/data/backups/inc1
/data/backups/inc2
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To prepare the base backup, you need to run \fIxtrabackup \-\-prepare\fP as
usual, but prevent the rollback phase:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
xtrabackup \-\-prepare \-\-apply\-log\-only \-\-target\-dir=/data/backups/base
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The output should end with some text such as the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
101107 20:49:43  InnoDB: Shutdown completed; log sequence number 1291135
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The log sequence number should match the \fBto_lsn\fP of the base backup, which
you saw previously.
.sp
This backup is actually safe to restore as\-is now,
even though the rollback phase has been skipped. If you restore it and start
\fIMySQL\fP, \fIInnoDB\fP will detect that the rollback phase was not performed, and it
will do that in the background, as it usually does for a crash recovery upon
start. It will notify you that the database was not shut down normally.
.sp
To apply the first incremental backup to the full backup, you should use the
following command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
xtrabackup \-\-prepare \-\-apply\-log\-only \-\-target\-dir=/data/backups/base \e
\-\-incremental\-dir=/data/backups/inc1
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This applies the delta files to the files in \fI/data/backups/base\fP, which
rolls them forward in time to the time of the incremental backup. It then
applies the redo log as usual to the result. The final data is in
\fI/data/backups/base\fP, not in the incremental directory. You should see
some output such as the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
incremental backup from 1291135 is enabled.
xtrabackup: cd to /data/backups/base/
xtrabackup: This target seems to be already prepared.
xtrabackup: xtrabackup_logfile detected: size=2097152, start_lsn=(1291340)
Applying /data/backups/inc1/ibdata1.delta ...
Applying /data/backups/inc1/test/table1.ibd.delta ...
\&.... snip
101107 20:56:30  InnoDB: Shutdown completed; log sequence number 1291340
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Again, the LSN should match what you saw from your earlier inspection of the
first incremental backup. If you restore the files from
\fI/data/backups/base\fP, you should see the state of the database as of the
first incremental backup.
.sp
Preparing the second incremental backup is a similar process: apply the deltas
to the (modified) base backup, and you will roll its data forward in time to the
point of the second incremental backup:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
xtrabackup \-\-prepare \-\-target\-dir=/data/backups/base \e
\-\-incremental\-dir=/data/backups/inc2
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fIxtrabackup \-\-apply\-log\-only\fP should be used when merging all
incrementals except the last one. That\(aqs why the previous line doesn\(aqt
contain the \fIxtrabackup \-\-apply\-log\-only\fP option. Even if the
\fIxtrabackup \-\-apply\-log\-only\fP was used on the last step, backup would
still be consistent but in that case server would perform the rollback phase.
.UNINDENT
.UNINDENT
.sp
If you wish to avoid the notice that \fIInnoDB\fP was not shut down normally, when
xoyou applied the desired deltas to the base backup, you can run
\fIxtrabackup \-\-prepare\fP again without disabling the rollback phase.
.SS Partial Backups
.sp
\fIxtrabackup\fP supports taking partial backups when the
\fIinnodb_file_per_table\fP option is enabled. There are three ways to create
partial backups:
.INDENT 0.0
.IP 1. 3
matching the tables names with a regular expression
.IP 2. 3
providing a list of table names in a file
.IP 3. 3
providing a list of databases
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
If any of the matched or listed tables is deleted during the
backup, \fIxtrabackup\fP will fail.
.sp
Do not copy back the prepared backup. Restoring partial backups
should be done by importing the tables, not by using the
\fI\-\-copy\-back\fP option. It is not recommended to run
incremental backups after running a partial backup.
.sp
Although there are some scenarios where restoring can be done by
copying back the files, this may lead to database inconsistencies
in many cases and it is not a recommended way to do it.
.UNINDENT
.UNINDENT
.sp
For the purposes of this manual page, we will assume that there is a database
named \fBtest\fP which contains tables named \fBt1\fP and \fBt2\fP\&.
.SS Using \fIxtrabackup \-\-tables\fP
.sp
The first method involves the \fIxtrabackup \-\-tables\fP option. The option\(aqs
value is a regular expression that is matched against the fully qualified
tablename, including the database name, in the form \fBdatabasename.tablename\fP\&.
.sp
To back up only tables in the \fBtest\fP database, you can use the
following command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ xtrabackup \-\-backup \-\-datadir=/var/lib/mysql \-\-target\-dir=/data/backups/ \e
\-\-tables="^test[.].*"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To back up only the table \fBtest.t1\fP, you can use the following command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ xtrabackup \-\-backup \-\-datadir=/var/lib/mysql \-\-target\-dir=/data/backups/ \e
\-\-tables="^test[.]t1"
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Using \fIxtrabackup \-\-tables\-file\fP
.sp
\fIxtrabackup \-\-tables\-file\fP specifies a file that can contain multiple
table names, one table name per line in the file. Only the tables named in the
file will be backed up. Names are matched exactly, case\-sensitive, with no
pattern or regular expression matching. The table names must be fully qualified,
in \fBdatabasename.tablename\fP format.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ echo "mydatabase.mytable" > /tmp/tables.txt
$ xtrabackup \-\-backup \-\-tables\-file=/tmp/tables.txt
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Using \fIxtrabackup \-\-databases\fP and \fIxtrabackup \-\-databases\-file\fP
.sp
\fIxtrabackup \-\-databases\fP accepts a space\-separated list of the databases
and tables to backup in the format \fBdatabasename[.tablename]\fP\&. In addition to
this list make sure to specify the \fBmysql\fP, \fBsys\fP, and
\fBperformance_schema\fP databases. These databases are required when restoring
the databases using \fIxtrabackup \-\-copy\-back\fP\&.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Tables processed during the \-\-prepare step may also be added to the backup
even if they are not explicitly listed by the parameter if they were created
after the backup started.
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ xtrabackup \-\-databases=\(aqmysql sys performance_schema ...\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fIxtrabackup \-\-databases\-file\fP specifies a file that can contain multiple
databases and tables in the \fBdatabasename[.tablename]\fP form, one element name
per line in the file. Names are matched exactly, case\-sensitive, with no pattern or regular expression matching.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Tables processed during the \-\-prepare step may also be added to the backup
even if they are not explicitly listed by the parameter if they were created
after the backup started.
.UNINDENT
.UNINDENT
.SS Preparing the Backup
.sp
When you use the \fIxtrabackup \-\-prepare\fP option on a partial backup, you
will see warnings about tables that don\(aqt exist. This is because these tables
exist in the data dictionary inside InnoDB, but the corresponding \fI\&.ibd\fP
files don\(aqt exist. They were not copied into the backup directory. These tables
will be removed from the data dictionary, and when you restore the backup and
start InnoDB, they will no longer exist and will not cause any errors or
warnings to be printed to the log file.
.sp
An example of the error message you will see during the prepare phase
follows.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
InnoDB: Reading tablespace information from the .ibd files...
101107 22:31:30  InnoDB: Error: table \(aqtest1/t\(aq
InnoDB: in InnoDB data dictionary has tablespace id 6,
InnoDB: but tablespace with that id or name does not exist. It will be removed from data dictionary.
.ft P
.fi
.UNINDENT
.UNINDENT
.SH ADVANCED FEATURES
.SS Throttling Backups
.sp
Although xtrabackup does not block your database\(aqs operation, any backup can add
load to the system being backed up. On systems that do not have much spare I/O
capacity, it might be helpful to throttle the rate at which xtrabackup reads and
writes data. You can do this with the \fIxtrabackup \-\-throttle\fP
option. This option limits the number of chunks copied per second. The chunk
size is \fI10 MB\fP\&.
.sp
The image below shows how throttling works when \fIxtrabackup
\-\-throttle\fP is set to 1.
[image]
.sp
By default, there is no throttling, and xtrabackup reads and writes data as
quickly as possible. If you set too strict of a limit on the IOPS, the backup may slow down so much that it will never catch up with the transaction logs that InnoDB is writing, and the backup might never be complete.
.SS Scripting Backups With xtrabackup
.sp
The \fIxtrabackup\fP tool has several features to enable scripts to control
it while they perform related tasks. The innobackupex script is one example, but \fIxtrabackup\fP
is easy to control with your own command\-line scripts too.
.SS Suspending After Copying
.sp
In backup mode, \fIxtrabackup\fP normally copies the log files in a
background thread, copies the data files in a foreground thread, and then stops
the log copying thread and finishes. As long as that file exists, xtrabackup
will continue to watch the log files and copy them into the
\fIxtrabackup_logfile\fP in the target directory. When the file is removed,
\fIxtrabackup\fP will finish copying the log file and exit.
.sp
This functionality is useful for coordinating the InnoDB data backups with other
actions. Perhaps the most obvious is copying the table definitions (the
\fI\&.frm\fP files) so that the backup can be restored. You can start
\fIxtrabackup\fP in the background, wait for the
\fIxtrabackup_suspended\fP file to be created, and then copy any other files
you need to complete the backup. This is exactly what the innobackupex tool does (it also copies MyISAM data and
other files).
.SS Generating Meta\-Data
.sp
It is a good idea for the backup to include all the information you need to
restore the backup. The \fIxtrabackup\fP tool can print out the contents of
a \fImy.cnf\fP file that are needed to restore the data and log files.
\fIxtrabackup \-\-print\-param\fP prints out something like the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# This MySQL options file was generated by XtraBackup.
[mysqld]
datadir = /data/mysql/
innodb_data_home_dir = /data/innodb/
innodb_data_file_path = ibdata1:10M:autoextend
innodb_log_group_home_dir = /data/innodb\-logs/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can redirect this output into a file in the target directory of the backup.
.SS Agreeing on the Source Directory
.sp
It\(aqs possible that the presence of a defaults file or other factors could cause
\fIxtrabackup\fP to back up data from a different location than you
expected. To prevent this, you can use \fIxtrabackup \-\-print\-param\fP to ask
it where it will be copying data from. You can use the output to ensure that
\fIxtrabackup\fP and your script are working on the same dataset.
.SS Analyzing Table Statistics
.sp
The \fIxtrabackup\fP binary can analyze InnoDB data files in read\-only mode to give
statistics about them. To do this, you should use the \fIxtrabackup
\-\-stats\fP option. You can combine this with the \fIxtrabackup \-\-tables\fP
option to limit the files to examine. It also uses the \fIxtrabackup
\-\-use\-memory\fP option.
.sp
You can perform the analysis on a running server, with some chance of errors due
to the data being changed during analysis. Or, you can analyze a backup copy of
the database. Either way, to use the statistics feature, you need a clean copy
of the database including correctly sized log files, so you need to execute with
\fIxtrabackup \-\-prepare\fP twice to use this functionality on a backup.
.sp
The result of running on a backup might look like the following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<INDEX STATISTICS>
  table: test/table1, index: PRIMARY, space id: 12, root page 3
  estimated statistics in dictionary:
    key vals: 25265338, leaf pages 497839, size pages 498304
  real statistics:
     level 2 pages: pages=1, data=5395 bytes, data/pages=32%
     level 1 pages: pages=415, data=6471907 bytes, data/pages=95%
        leaf pages: recs=25958413, pages=497839, data=7492026403 bytes, data/pages=91%
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This can be interpreted as follows:
.INDENT 0.0
.IP \(bu 2
The first line simply shows the table and index name and its internal
identifiers. If you see an index named \fBGEN_CLUST_INDEX\fP, that is the
table\(aqs clustered index, automatically created because you did not explicitly
create a \fBPRIMARY KEY\fP\&.
.IP \(bu 2
The estimated statistics in dictionary information is similar to the data
that\(aqs gathered through \fBANALYZE TABLE\fP inside of \fIInnoDB\fP to be stored as
estimated cardinality statistics and passed to the query optimizer.
.IP \(bu 2
The real statistics information is the result of scanning the data pages and
computing exact information about the index.
.IP \(bu 2
\fBThe level <X> pages\fP: output means that the line shows information about
pages at that level in the index tree. The larger \fB<X>\fP is, the farther it
is from the leaf pages, which are level 0. The first line is the root page.
.IP \(bu 2
The \fBleaf pages\fP output shows the leaf pages, of course. This is where the
table\(aqs data is stored.
.IP \(bu 2
The \fBexternal pages\fP: output (not shown) shows large external pages that
hold values too long to fit in the row itself, such as long \fBBLOB\fP and
\fBTEXT\fP values.
.IP \(bu 2
The \fBrecs\fP is the real number of records (rows) in leaf pages.
.IP \(bu 2
The \fBpages\fP is the page count.
.IP \(bu 2
The \fBdata\fP is the total size of the data in the pages, in bytes.
.IP \(bu 2
The \fBdata/pages\fP is calculated as (\fBdata\fP / (\fBpages\fP * \fBPAGE_SIZE\fP)) *
100%. It will never reach 100% because of space reserved for page headers and
footers.
.UNINDENT
.sp
\fBSEE ALSO:\fP
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.TP
.B A more detailed example as a MySQL Performance blog post
\fI\%http://www.mysqlperformanceblog.com/2009/09/14/statistics\-of\-innodb\-tables\-and\-indexes\-available\-in\-xtrabackup/\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SS Script to Format Output
.sp
The following script can be used to summarize and tabulate the output of the
statistics information:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
tabulate\-xtrabackup\-stats.pl

#!/usr/bin/env perl
use strict;
use warnings FATAL => \(aqall\(aq;
my $script_version = "0.1";

my $PG_SIZE = 16_384; # InnoDB defaults to 16k pages, change if needed.
my ($cur_idx, $cur_tbl);
my (%idx_stats, %tbl_stats);
my ($max_tbl_len, $max_idx_len) = (0, 0);
while ( my $line = <> ) {
   if ( my ($t, $i) = $line =~ m/table: (.*), index: (.*), space id:/ ) {
      $t =~ s!/!.!;
      $cur_tbl = $t;
      $cur_idx = $i;
      if ( length($i) > $max_idx_len ) {
         $max_idx_len = length($i);
      }
      if ( length($t) > $max_tbl_len ) {
         $max_tbl_len = length($t);
      }
   }
   elsif ( my ($kv, $lp, $sp) = $line =~ m/key vals: (\ed+), \eD*(\ed+), \eD*(\ed+)/ ) {
      @{$idx_stats{$cur_tbl}\->{$cur_idx}}{qw(est_kv est_lp est_sp)} = ($kv, $lp, $sp);
      $tbl_stats{$cur_tbl}\->{est_kv} += $kv;
      $tbl_stats{$cur_tbl}\->{est_lp} += $lp;
      $tbl_stats{$cur_tbl}\->{est_sp} += $sp;
   }
   elsif ( my ($l, $pages, $bytes) = $line =~ m/(?:level (\ed+)|leaf) pages:.*pages=(\ed+), data=(\ed+) bytes/ ) {
      $l ||= 0;
      $idx_stats{$cur_tbl}\->{$cur_idx}\->{real_pages} += $pages;
      $idx_stats{$cur_tbl}\->{$cur_idx}\->{real_bytes} += $bytes;
      $tbl_stats{$cur_tbl}\->{real_pages} += $pages;
      $tbl_stats{$cur_tbl}\->{real_bytes} += $bytes;
   }
}

my $hdr_fmt = "%${max_tbl_len}s %${max_idx_len}s %9s %10s %10s\en";
my @headers = qw(TABLE INDEX TOT_PAGES FREE_PAGES PCT_FULL);
printf $hdr_fmt, @headers;

my $row_fmt = "%${max_tbl_len}s %${max_idx_len}s %9d %10d %9.1f%%\en";
foreach my $t ( sort keys %tbl_stats ) {
   my $tbl = $tbl_stats{$t};
   printf $row_fmt, $t, "", $tbl\->{est_sp}, $tbl\->{est_sp} \- $tbl\->{real_pages},
      $tbl\->{real_bytes} / ($tbl\->{real_pages} * $PG_SIZE) * 100;
   foreach my $i ( sort keys %{$idx_stats{$t}} ) {
      my $idx = $idx_stats{$t}\->{$i};
      printf $row_fmt, $t, $i, $idx\->{est_sp}, $idx\->{est_sp} \- $idx\->{real_pages},
         $idx\->{real_bytes} / ($idx\->{real_pages} * $PG_SIZE) * 100;
   }
}
.ft P
.fi
.UNINDENT
.UNINDENT
Sample Script Output
.sp
The output of the above Perl script, when run against the sample shown in the
previously mentioned blog post, will appear as follows:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
          TABLE           INDEX TOT_PAGES FREE_PAGES   PCT_FULL
art.link_out104                    832383      38561      86.8%
art.link_out104         PRIMARY    498304         49      91.9%
art.link_out104       domain_id     49600       6230      76.9%
art.link_out104     domain_id_2     26495       3339      89.1%
art.link_out104 from_message_id     28160        142      96.3%
art.link_out104    from_site_id     38848       4874      79.4%
art.link_out104   revert_domain    153984      19276      71.4%
art.link_out104    site_message     36992       4651      83.4%
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The columns are the table and index, followed by the total number of pages in
that index, the number of pages not actually occupied by data, and the number of
bytes of real data as a percentage of the total size of the pages of real
data. The first line in the above output, in which the \fBINDEX\fP column is
empty, is a summary of the entire table.
.SS Working with Binary Logs
.sp
The \fBxtrabackup\fP binary integrates with information that \fIInnoDB\fP stores in
its transaction log about the corresponding binary log position for committed
transactions. This enables it to print out the binary log position to which a
backup corresponds, so you can use it to set up new replication replicas or
perform point\-in\-time recovery.
.SS Finding the Binary Log Position
.sp
You can find the binary log position corresponding to a backup once the backup
has been prepared. This can be done by either running \fIxtrabackup
\-\-prepare\fP or \fIinnobackupex \-\-apply\-log\fP\&. If your backup is from a
server with binary logging enabled, \fIxtrabackup\fP will create a file named
\fIxtrabackup_binlog_info\fP in the target directory. This file contains the
binary log file name and position of the exact point in the binary log to which
the prepared backup corresponds.
.sp
You will also see output similar to the following during the \fBprepare\fP stage:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
InnoDB: Last MySQL binlog file position 0 3252710, file name ./mysql\-bin.000001
\&... snip ...
[notice (again)]
  If you use binary log and don\(aqt use any hack of group commit,
  the binary log position seems to be:
InnoDB: Last MySQL binlog file position 0 3252710, file name ./mysql\-bin.000001
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This output can also be found in the \fIxtrabackup_binlog_pos_innodb\fP file,
but \fBit is only correct\fP when no other than XtraDB or \fIInnoDB\fP are used as
storage engines.
.sp
If other storage engines are used (i.e. \fIMyISAM\fP), you should use the
\fIxtrabackup_binlog_info\fP file to retrieve the position.
.sp
The message about hacking group commit refers to an early implementation of
emulated group commit in \fIPercona Server for MySQL\fP\&.
.SS Point\-In\-Time Recovery
.sp
To perform a point\-in\-time recovery from an \fBxtrabackup\fP backup, you should
prepare and restore the backup, and then replay binary logs from the point shown
in the \fIxtrabackup_binlog_info\fP file.
.sp
A more detailed procedure is found here (with innobackupex).
.SS Setting Up a New Replication Replica
.sp
To set up a new replica, you should prepare the backup, and restore it to the
data directory of your new replication replica. Then in your \fBCHANGE MASTER TO\fP
command, use the binary log filename and position shown in the
\fIxtrabackup_binlog_info\fP file to start replication.
.sp
A more detailed procedure is found in \&../howtos/setting_up_replication\&.
.SS Restoring Individual Tables
.sp
With \fIPercona XtraBackup\fP, you can export individual tables from any \fIInnoDB\fP database, and
import them into \fIPercona Server for MySQL\fP with \fIXtraDB\fP or \fIMySQL\fP 5.7. The source does not
need to be \fIXtraDB\fP or \fIMySQL\fP 5.7 but the destination must be. This operation only works on
individual \fI\&.ibd\fP files. A table that is not contained in its own \fI\&.ibd\fP file cannot be exported.
.sp
Let\(aqs see how to export and import the following table:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
CREATE TABLE export_test (
  a int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Exporting the Table
.sp
This table should have been created in \fIinnodb_file_per_table\fP mode, so
after taking a backup as usual with \fIxtrabackup \-\-backup\fP, the
\fI\&.ibd\fP file should exist in the target directory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ find /data/backups/mysql/ \-name export_test.*
/data/backups/mysql/test/export_test.ibd
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
when you prepare the backup, add the extra parameter
\fIxtrabackup \-\-export\fP to the command. Here is an example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ xtrabackup \-\-prepare \-\-export \-\-target\-dir=/data/backups/mysql/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
If you\(aqre trying to restore encrypted InnoDB tablespace table you must specify the
keyring file as well:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
xtrabackup \-\-prepare \-\-export \-\-target\-dir=/tmp/table \e
\-\-keyring\-file\-data=/var/lib/mysql\-keyring/keyring
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Now you should see a \fI\&.exp\fP file in the target directory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ find /data/backups/mysql/ \-name export_test.*
/data/backups/mysql/test/export_test.exp
/data/backups/mysql/test/export_test.ibd
/data/backups/mysql/test/export_test.cfg
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
These three files are all you need to import the table into a server running
\fIPercona Server for MySQL\fP with XtraDB or \fIMySQL\fP 5.7. In case server is using \fI\%InnoDB
Tablespace Encryption\fP
additional \fI\&.cfp\fP file be listed for encrypted tables.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
\fIMySQL\fP uses \fI\&.cfg\fP file which contains \fIInnoDB\fP dictionary dump in
special format. This format is different from the \fI\&.exp\(ga\fP one which is
used in XtraDB for the same purpose. Strictly speaking, a \fI\&.cfg\(ga\fP
file is not required to import a tablespace to \fIMySQL\fP 5.7 or \fIPercona Server for MySQL\fP 5.7. A tablespace will be imported successfully even if it is from
another server, but \fIInnoDB\fP will do schema validation if the corresponding
\fI\&.cfg\fP file is present in the same directory.
.UNINDENT
.UNINDENT
.SS Importing the Table
.sp
On the destination server, create a table with the same structure, and then perform the following steps:
.INDENT 0.0
.IP \(bu 2
Execute \fBALTER TABLE test.export_test DISCARD TABLESPACE;\fP
.INDENT 2.0
.IP \(bu 2
If you see the \fBERROR 1030
(HY000): Got error \-1 from storage engine\fP message, then enable
innodb_file_per_table and create the table again:
.UNINDENT
.IP \(bu 2
Copy the exported files to the \fBtest/\fP subdirectory of the destination
server\(aqs data directory
.IP \(bu 2
Execute \fBALTER TABLE test.export_test IMPORT TABLESPACE;\fP
.UNINDENT
.sp
The table should now be imported, and you should be able to \fBSELECT\fP from it
and see the imported data.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Persistent statistics for imported tablespace will be empty until you run the
\fBANALYZE TABLE\fP on the imported table. They are empty because they are
stored in the system tables \fBmysql.innodb_table_stats\fP and
\fBmysql.innodb_index_stats\fP and they are not updated by server during the
import. This is due to upstream bug \fI\%#72368\fP\&.
.UNINDENT
.UNINDENT
.SS LRU dump backup
.sp
This feature reduces the warm up time by restoring buffer pool state from \fIib_lru_dump\fP file after restart. \fIPercona XtraBackup\fP discovers \fIib_lru_dump\fP and backs it up automatically.
[image]
.sp
If the buffer restore option is enabled in \fImy.cnf\fP buffer pool will be in the warm state after backup is restored. To enable this set the variable \fI\%innodb_buffer_pool_restore_at_startup\fP =1 in Percona Server 5.5 or \fI\%innodb_auto_lru_dump\fP =1 in Percona Server 5.1.
.SH IMPLEMENTATION
.SS Implementation Details
.sp
This page contains notes on various internal aspects of the \fIxtrabackup\fP tool\(aqs
operation.
.SS File Permissions
.sp
\fIxtrabackup\fP opens the source data files in read\-write mode, although it does
not modify the files. This means that you must run \fIxtrabackup\fP as a user who
has permission to write the data files. The reason for opening the files in
read\-write mode is that \fIxtrabackup\fP uses the embedded \fIInnoDB\fP libraries to
open and read the files, and \fIInnoDB\fP opens them in read\-write mode because it
normally assumes it is going to write to them.
.SS Tuning the OS Buffers
.sp
Because \fIxtrabackup\fP reads large amounts of data from the filesystem, it uses
\fBposix_fadvise()\fP where possible, to instruct the operating system not to try
to cache the blocks it reads from disk. Without this hint, the operating system
would prefer to cache the blocks, assuming that \fBxtrabackup\fP is likely to need
them again, which is not the case. Caching such large files can place pressure
on the operating system\(aqs virtual memory and cause other processes, such as the
database server, to be swapped out. The \fBxtrabackup\fP tool avoids this with the
following hint on both the source and destination files:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
posix_fadvise(file, 0, 0, POSIX_FADV_DONTNEED)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In addition, xtrabackup asks the operating system to perform more aggressive
read\-ahead optimizations on the source files:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
posix_fadvise(file, 0, 0, POSIX_FADV_SEQUENTIAL)
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Copying Data Files
.sp
When copying the data files to the target directory, \fIxtrabackup\fP reads and
writes 1MB of data at a time. This is not configurable. When copying the log
file, \fIxtrabackup\fP reads and writes 512 bytes at a time. This is also not
possible to configure, and matches InnoDB\(aqs behavior (workaround exists in
\fIPercona Server for MySQL\fP because it has an option to tune
\fBinnodb_log_block_size\fP for XtraDB, and in that case XtraBackup will
match the tuning).
.sp
After reading from the files, \fBxtrabackup\fP iterates over the 1MB buffer a page
at a time, and checks for page corruption on each page with InnoDB\(aqs
\fBbuf_page_is_corrupted()\fP function. If the page is corrupt, it re\-reads and
retries up to 10 times for each page. It skips this check on the doublewrite
buffer.
.SS \fIxtrabackup\fP Exit Codes
.sp
The \fIxtrabackup\fP binary exits with the traditional success value of 0 after a backup when no error occurs. If an error occurs during the backup, the exit value is 1.
.sp
In certain cases, the exit value can be something other than 0 or 1, due to the command\-line option code included from the \fIMySQL\fP libraries. An unknown command\-line option, for example, will cause an exit code of 255.
.SH REFERENCES
.SS The \fIxtrabackup\fP Option Reference
.sp
This page documents all of the command\-line options for the
\fIxtrabackup\fP binary.
.SS Options
.INDENT 0.0
.TP
.B \-\-apply\-log\-only
This option causes only the redo stage to be performed when preparing a
backup. It is very important for incremental backups.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-backup
Make a backup and place it in \fIxtrabackup \-\-target\-dir\fP\&. See
Creating a backup\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-backup\-lock\-retry\-count=#
The number of attempts to acquire metadata locks.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-backup\-lock\-timeout=#
The timeout in seconds for attempts to acquire metadata locks.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-binlog\-info
This option controls how \fIPercona XtraBackup\fP should retrieve the server\(aqs
binary log coordinates corresponding to the backup. Possible values are
\fBOFF\fP, \fBON\fP, \fBLOCKLESS\fP and \fBAUTO\fP\&. See the \fIPercona XtraBackup\fP
lockless_bin\-log  manual page for more information.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-check\-privileges
This option checks if \fIPercona XtraBackup\fP has all the required privileges.
If a missing privilege is required for the current operation,
it will terminate and print out an error message.
If a missing privilege is not required for the current operation
but may be necessary for some other XtraBackup operation,
the process is not aborted, and a warning is printed.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
xtrabackup: Error: missing required privilege LOCK TABLES on *.*
xtrabackup: Warning: missing required privilege REPLICATION CLIENT on *.*
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-close\-files
Do not keep files open. When \fIxtrabackup\fP opens a tablespace, it normally
does not close its file handle to manage the DDL operations
correctly. However, if the number of tablespaces is huge and can not
fit into any limit, there is an option to close file handles once they are
no longer accessed. \fIPercona XtraBackup\fP can produce inconsistent backups
with this option enabled. Use the option at your own risk.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-compact
Create a compact backup by skipping secondary index pages.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-compress
This option tells \fIxtrabackup\fP to compress all output data, including the
transaction log file and metadata files, using the specified compression
algorithm. The only currently supported algorithm is \fBquicklz\fP\&. The
resulting files have the qpress archive format.
.sp
Every \fB*.qp\fP file
produced by xtrabackup is essentially a one\-file qpress archive and can be
extracted and uncompressed by the \fI\%qpress\fP  file
archiver.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-compress\-chunk\-size=#
Size of working buffer(s) for compression threads in bytes. The default
value is 64K.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-compress\-threads=#
This option specifies the number of worker threads used by \fIxtrabackup\fP for
parallel data compression. This option defaults to \fB1\fP\&. Parallel
compression (\(ga xtrabackup \-\-compress\-threads\(ga) can be used together
with parallel file copying (\fIxtrabackup \-\-parallel\fP). For example,
\fB\-\-parallel=4 \-\-compress \-\-compress\-threads=2\fP will create 4 I/O threads
that will read the data and pipe it to 2 compression threads.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-copy\-back
Copy all the files in a previously made backup from the backup directory to
their original locations. This option will not copy over existing files
unless \fIxtrabackup \-\-force\-non\-empty\-directories\fP option is
specified.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-core\-file
Write core on fatal signals.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-databases=#
This option specifies the list of databases and tables that should be backed
up. The option accepts the list of the form \fB"databasename1[.table_name1]
databasename2[.table_name2] . . ."\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-databases\-exclude=name
Excluding databases based on name. This option operates the same way
as \fIxtrabackup \-\-databases\fP, but matched names are excluded from the
backup. Note that this option has a higher priority than
\fIxtrabackup \-\-databases\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-databases\-file=#
This option specifies the path to the file containing the list of databases
and tables that should be backed up. The file can contain the list elements
of the form \fBdatabasename1[.table_name1]\fP, one element per line.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-datadir=DIRECTORY
The source directory for the backup. This directory should be the same as the datadir
for your \fIMySQL\fP server, and it should be read from \fImy.cnf\fP if that
exists; otherwise, you must specify it on the command line.
.sp
When combined with the \fIxtrabackup \-\-copy\-back\fP or
\fIxtrabackup \-\-move\-back\fP option, \fIxtrabackup \-\-datadir\fP
refers to the destination directory.
.sp
Once connected to the server, to perform a backup, you will need
\fBREAD\fP and \fBEXECUTE\fP permissions at a filesystem level in the
server\(aqs \fIdatadir\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-debug\-sleep\-before\-unlock=#
A debug\-only option that is used by the Xtrabackup test suite.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-decompress
This option decompresses all files with the \fI\&.qp\fP extension in a backup previously
made with the \fIxtrabackup \-\-compress\fP option. The
\fIxtrabackup \-\-parallel\fP option will allow multiple files to be
decrypted simultaneously. To decompress, the qpress utility MUST be
installed and accessible within the path. \fIPercona XtraBackup\fP doesn\(aqt
automatically remove the compressed files. To clean up the backup
directory, users should use the \fIxtrabackup \-\-remove\-original\fP option.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-decrypt=ENCRYPTION\-ALGORITHM
Decrypts all files with the \fI\&.xbcrypt\fP extension in a backup
previously made with \fIxtrabackup \-\-encrypt\fP option. The
\fIxtrabackup \-\-parallel\fP option will allow multiple files to be
decrypted simultaneously. \fIPercona XtraBackup\fP doesn\(aqt
automatically remove the encrypted files. To clean up the backup
directory, users should use \fIxtrabackup \-\-remove\-original\fP option.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-defaults\-extra\-file=[MY.CNF]
Read this file after the global files are read. This file must be the first
option on the command\-line.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-defaults\-file=[MY.CNF]
Only read default options from the given file. This file must be the first
option on the command\-line and be a real file and cannot be a symbolic
link.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-defaults\-group=GROUP\-NAME
This option sets up the group which should be read from the configuration
file. The option is used by the \fI\-\-default\-group\fP and is required for
.sp
\fBmysqld_multi\fP deployments.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-defaults\-group\-suffix=#
Read the usual options groups and also groups with concat(group, suffix).
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dump\-innodb\-buffer\-pool
This option controls whether or not a new dump of buffer pool
content should be done.
.sp
With \fB\-\-dump\-innodb\-buffer\-pool\fP, \fIxtrabackup\fP
makes a request to the server to start the buffer pool dump (it
takes some time to complete and is done in background) at the
beginning of a backup provided the status variable
\fBinnodb_buffer_pool_dump_status\fP reports that the dump has been
completed.
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
$ xtrabackup \-\-backup \-\-dump\-innodb\-buffer\-pool \-\-target\-dir=/home/user/backup
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
By default, this option is set to \fIOFF\fP\&.
.sp
If \fBinnodb_buffer_pool_dump_status\fP reports that there is running
dump of the buffer pool, \fIxtrabackup\fP waits for the dump to complete
using the value of \fI\-\-dump\-innodb\-buffer\-pool\-timeout\fP
.sp
The file \fIib_buffer_pool\fP stores tablespace ID and page ID
data used to warm up the buffer pool sooner.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \fIMySQL\fP Documentation: Saving and Restoring the Buffer Pool State
\fI\%https://dev.mysql.com/doc/refman/5.7/en/innodb\-preload\-buffer\-pool.html\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dump\-innodb\-buffer\-pool\-timeout
This option contains the number of seconds that \fIxtrabackup\fP should
monitor the value of \fBinnodb_buffer_pool_dump_status\fP to
determine if buffer pool dump has completed.
.sp
This option is used in combination with
\fI\-\-dump\-innodb\-buffer\-pool\fP\&. By default, it is set to \fI10\fP
seconds.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dump\-innodb\-buffer\-pool\-pct
This option contains the percentage of the most recently used buffer pool
pages to dump.
.sp
This option is effective if \fI\-\-dump\-innodb\-buffer\-pool\fP option is set
to \fION\fP\&. If this option contains a value, \fIxtrabackup\fP sets the \fIMySQL\fP
system variable \fBinnodb_buffer_pool_dump_pct\fP\&. As soon as the buffer pool
dump completes or it is stopped (see
\fI\-\-dump\-innodb\-buffer\-pool\-timeout\fP), the value of the \fIMySQL\fP system
variable is restored.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B Changing the timeout for buffer pool dump
\fI\-\-dump\-innodb\-buffer\-pool\-timeout\fP
.TP
.B \fIMySQL\fP Documentation: innodb_buffer_pool_dump_pct system variable
\fI\%https://dev.mysql.com/doc/refman/8.0/en/innodb\-parameters.html#sysvar_innodb_buffer_pool_dump_pct\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-encrypt=ENCRYPTION_ALGORITHM
This option instructs xtrabackup to encrypt backup copies of InnoDB data
files using the algorithm specified in the ENCRYPTION_ALGORITHM. It is
passed directly to the xtrabackup child process. See the
\fIxtrabackup\fP
documentation for more details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-encrypt\-key=ENCRYPTION_KEY
This option instructs xtrabackup to use the given \fBENCRYPTION_KEY\fP when
using the \fIxtrabackup \-\-encrypt\fP option. It is passed directly to
the xtrabackup child process. See the \fIxtrabackup\fP
documentation for more details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-encrypt\-key\-file=ENCRYPTION_KEY_FILE
This option instructs xtrabackup to use the encryption key stored in the
given \fBENCRYPTION_KEY_FILE\fP when using the \fIxtrabackup \-\-encrypt\fP
option. It is passed directly to the xtrabackup child process. See the
\fIxtrabackup\fP documentation for more details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-encrypt\-threads=#
This option specifies the number of worker threads that will be used for
parallel encryption/decryption.
See the \fIxtrabackup\fP documentation for more details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-encrypt\-chunk\-size=#
This option specifies the size of the internal working buffer for each
encryption thread, and is measured in bytes. It is passed directly to the
xtrabackup child process. See the \fIxtrabackup\fP documentation for more details.
.sp
\fBNOTE:\fP
.INDENT 7.0
.INDENT 3.5
To adjust the xbcloud/xbstream chunk size when you use encryption, you must adjust both the \-\-encrypt\-chunk\-size and \-\-read\-buffer\-size variables.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-export
Create files necessary for exporting tables. See Restoring Individual
Tables\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-extra\-lsndir=DIRECTORY
(for \-\-backup): save an extra copy of the \fIxtrabackup_checkpoints\fP
and \fIxtrabackup_info\fP files in this directory.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-force\-non\-empty\-directories
When specified, it makes :option\(gaxtrabackup \-\-copy\-back\(ga and
\fIxtrabackup \-\-move\-back\fP option transfer files to non\-empty
directories. No existing files will be overwritten. If files that need to
be copied/moved from the backup directory already exist in the destination
directory, it will still fail with an error.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftwrl\-wait\-timeout=SECONDS
This option specifies time in seconds that xtrabackup should wait for
queries that would block \fBFLUSH TABLES WITH READ LOCK\fP before running it.
If there are still such queries when the timeout expires, xtrabackup
terminates with an error. The default is \fB0\fP, in which case it does not wait
for queries to complete and starts \fBFLUSH TABLES WITH READ LOCK\fP
immediately. Where supported (Percona Server 5.6+) xtrabackup will
automatically use \fI\%Backup Locks\fP
as a lightweight alternative to \fBFLUSH TABLES WITH READ LOCK\fP to copy
non\-InnoDB data to avoid blocking DML queries that modify InnoDB tables.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftwrl\-wait\-threshold=SECONDS
This option specifies the query run time threshold which is used by
xtrabackup to detect long\-running queries with a non\-zero value of
\fIxtrabackup \-\-ftwrl\-wait\-timeout\fP\&. \fBFLUSH TABLES WITH READ LOCK\fP
is not started until such long\-running queries exist. This option has no
effect if \fIxtrabackup \-\-ftwrl\-wait\-timeout\fP is \fB0\fP\&. The default value
is \fB60\fP seconds. Where supported (Percona Server 5.6+) xtrabackup will
automatically use \fI\%Backup Locks\fP
as a lightweight alternative to \fBFLUSH TABLES WITH READ LOCK\fP to copy
non\-InnoDB data to avoid blocking DML queries that modify InnoDB tables.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ftwrl\-wait\-query\-type=all|update
This option specifies which types of queries are allowed to complete before
xtrabackup will issue the global lock. The default is \fBall\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-galera\-info
This options creates the \fIxtrabackup_galera_info\fP file which contains
the local node state at the time of the backup. Option should be used when
performing the backup of Percona XtraDB Cluster. It has no effect when
backup locks are used to create the backup.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-generate\-new\-master\-key
Generates a new master key when doing a copy\-back operation.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-history=name
This option enables the tracking of the backup history in the
\fBPERCONA_SCHEMA.xtrabackup_history\fP table. An optional history series name
may be specified that will be placed with the history record for the backup
being taken.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-incremental
This option tells xtrabackup to create an incremental backup. It is passed to
the xtrabackup child process. When this option is specified, either
\fIxtrabackup \-\-incremental\-lsn\fP or \fIxtrabackup
\-\-incremental\-basedir\fP can also be given. If neither option is given, option
\fIxtrabackup \-\-incremental\-basedir\fP is passed to xtrabackup by
default, set to the first timestamped backup directory in the backup base
directory.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
More information about incremental backups
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-incremental\-basedir=DIRECTORY
This directory contains the full backup, which is the base dataset used for the incremental backups.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-incremental\-dir=DIRECTORY
When preparing an incremental backup, this is the directory where the
incremental backup is combined with the full backup to make a new full
backup.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-incremental\-force\-scan
When creating an incremental backup, force a full scan of the data pages in
the instance to be used in the backup even if the complete changed page bitmap data is
available.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-incremental\-history\-name=name
This option specifies the name of the backup series stored in the
PERCONA_SCHEMA.xtrabackup_history history record
to base an incremental backup on. \fIxtrabackup\fP searches the history
table for the most recent (highest innodb_to_lsn), successful backup
in the series and take the to_lsn value to use as the starting lsn for the
incremental backup. This will be mutually exclusive with \fIxtrabackup
\-\-incremental\-history\-uuid\fP, \fIxtrabackup \-\-incremental\-basedir\fP and
\fIxtrabackup \-\-incremental\-lsn\fP\&. If no valid \fILSN\fP can be found
(no series by that name, no successful backups by that name) \fIxtrabackup\fP
returns an error. It is used with the \fIxtrabackup \-\-incremental\fP
option.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-innodb\-checksum\-algorithm=name
The algorithm InnoDB uses to calculate a page checksum. The available
algorithms are CRC32, INNODB, NONE, STRICT_CRC32, STRICT_INNODB,
and STRICT_NONE
.UNINDENT
.INDENT 0.0
.TP
.B \-\-incremental\-history\-uuid=UUID
This option specifies the \fIUUID\fP of the specific history record stored
in the PERCONA_SCHEMA.xtrabackup_history to base
an incremental backup on. \fIxtrabackup \-\-incremental\-history\-name\fP,
\fIxtrabackup \-\-incremental\-basedir\fP and \fIxtrabackup
\-\-incremental\-lsn\fP\&. If no valid \fILSN\fP is found (no success record with
that \fIUUID\fP) \fIxtrabackup\fP returns an error. This option is used with
the \fIxtrabackup \-\-incremental\fP option.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-incremental\-lsn=LSN
When creating an incremental backup, you can specify the log sequence number
(\fILSN\fP) instead of specifying
\fIxtrabackup \-\-incremental\-basedir\fP\&. For databases created in 5.1 and
later, specify the \fILSN\fP as a single 64\-bit integer. \fBATTENTION\fP: If
a wrong LSN value is specified (a user  error that \fIPercona XtraBackup\fP cannot detect), the backup will be unusable. Be careful!
.UNINDENT
.INDENT 0.0
.TP
.B \-\-innodb\-log\-arch\-dir=DIRECTORY
This option is used to specify the directory containing the archived logs.
It can only be used with the \fIxtrabackup \-\-prepare\fP option.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-innodb\-miscellaneous
A large group of InnoDB options are normally read from the
\fImy.cnf\fP configuration file, so that \fIxtrabackup\fP boots up its
embedded InnoDB in the same configuration as your current server. You
normally do not need to specify these explicitly. These options have the
same behavior that they have in InnoDB or XtraDB. They are as follows:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-innodb\-adaptive\-hash\-index
\-\-innodb\-additional\-mem\-pool\-size
\-\-innodb\-autoextend\-increment
\-\-innodb\-buffer\-pool\-size
\-\-innodb\-checksums
\-\-innodb\-data\-file\-path
\-\-innodb\-data\-home\-dir
\-\-innodb\-doublewrite\-file
\-\-innodb\-doublewrite
\-\-innodb\-extra\-undoslots
\-\-innodb\-fast\-checksum
\-\-innodb\-file\-io\-threads
\-\-innodb\-file\-per\-table
\-\-innodb\-flush\-log\-at\-trx\-commit
\-\-innodb\-flush\-method
\-\-innodb\-force\-recovery
\-\-innodb\-io\-capacity
\-\-innodb\-lock\-wait\-timeout
\-\-innodb\-log\-buffer\-size
\-\-innodb\-log\-files\-in\-group
\-\-innodb\-log\-file\-size
\-\-innodb\-log\-group\-home\-dir
\-\-innodb\-max\-dirty\-pages\-pct
\-\-innodb\-open\-files
\-\-innodb\-page\-size
\-\-innodb\-read\-io\-threads
\-\-innodb\-write\-io\-threads
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-innodb\-undo\-directory=name
The directory location for the undo tablespace. The path is absolute.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-innodb\-undo\-tablespace=#
The number of undo tablespaces to use.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-keyring\-file\-data=FILENAME
The path to the keyring file. Combine this option with
\fIxtrabackup \-\-xtrabackup\-plugin\-dir\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-kill\-long\-queries\-timeout=#
This options specifies the number of seconds xtrabackup waits between
starting FLUSH TABLES WITH READ LOCK and killing those queries that block
it. The default is \fB0\fP (zero) seconds, which means the xtrabackup does not
attempt to kill any queries.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-kill\-long\-query\-type=select|all
This option specifies which types of queries should be killed to unblock the global lock. The default value is \fBselect\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-lock\-ddl
Issue \fBLOCK TABLES FOR BACKUP\fP if it is supported by server
at the beginning of the backup to block all DDL operations.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-lock\-ddl\-per\-table
Lock DDL for each table before xtrabackup starts to copy
it and until the backup is completed.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-lock\-ddl\-timeout
If \fBLOCK TABLES FOR BACKUP\fP does not return within given
timeout, abort the backup.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-log\-bin[=name]
The base name for the log sequence.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-log\-copy\-interval=#
This option specifies time interval between log copying
thread checks in milliseconds (default is 1 second).
.UNINDENT
.INDENT 0.0
.TP
.B \-\-login\-path=#
Read this path from the login file.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-move\-back
Move all the files in a previously made backup from the backup directory to
their original locations. As this option removes backup files, it must be
used with caution.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-backup\-locks
This options controls if backup locks are used instead of \fBFLUSH TABLES
WITH READ LOCK\fP during the backup stage. The backup locks are must be supported on the server for the option to have an affect.
.sp
This option is enabled by default. Disable the option
with \fI\-\-no\-backup\-locks\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-defaults
Do not read the default options from any option file. Must be given as the first
option on the command\-line.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-lock
This option automatically uses Backup Locks, and disables table locks, as a
lightweight alternative to \fBFLUSH TABLES WITH READ LOCK\fP to copy
non\-InnoDB data to avoid blocking DML queries that modify InnoDB tables.
.sp
Only use this option if \fIall\fP tables are InnoDB and you \fIdo not care\fP about
the binary log position of the backup.
.sp
Do not use this option if any DDL statements will be executed or if any
non\-InnoDB tables are being updated (this includes the MyISAM tables in the
mysql database). Using this option in these conditions could cause an
inconsistent backup.
.sp
If your backups fail to acquire a lock and you are planning to use this
option, the failure may be caused by incoming replication events that
prevent the lock from succeeding. Try the \fB\-\-safe\-slave\-backup\fP
to momentarily stop the replication slave thread.
.sp
The \fIxtrabackup\-binlog\-info\fP is not created when the \fI\-\-no\-lock\fP
is used because \fBSHOW MASTER STATUS\fP may be inconsistent. In certain
conditions, \fBxtrabackup_binlog_pos_innodb\fP can be used instead to get
consistent binlog coordinates as described in working_with_binlogs\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-no\-version\-check
This option disables the version check. If you do not pass this option, the
automatic version check is enabled implicitly when xtrabackup runs
in the \fB\-\-backup\fP mode. To disable the version check, explicitly pass
the \fB\-\-no\-version\-check\fP option when invoking xtrabackup.
.sp
When the automatic version check is enabled,xtrabackup performs a
version check against the server on the backup stage after creating a server
connection. xtrabackup sends the following information to the server:
.INDENT 7.0
.IP \(bu 2
MySQL flavour and version
.IP \(bu 2
Operating system name
.IP \(bu 2
Percona Toolkit version
.IP \(bu 2
Perl version
.UNINDENT
.sp
Each piece of information has a unique identifier which is an MD5 hash value
that Percona Toolkit uses to obtain statistics about how it is used. This value is
a random UUID; no client information is either collected or stored.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-open\-files\-limit=#
The maximum number of file descriptors to reserve with setrlimit().
.UNINDENT
.INDENT 0.0
.TP
.B \-\-parallel=#
This option specifies the number of threads to use to copy multiple data
files concurrently when creating a backup. The default value is 1 (i.e., no
concurrent transfer). In \fIPercona XtraBackup\fP 2.3.10 and newer, this option
can be used with \fIxtrabackup \-\-copy\-back\fP option to copy the user
data files in parallel (redo logs and system tablespaces are copied in the
main thread).
.UNINDENT
.INDENT 0.0
.TP
.B \-\-password=PASSWORD
This option specifies the password to use when connecting to the database.
It accepts a string argument. See \fBmysql \-\-help\fP for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-prepare
Makes \fIxtrabackup\fP perform recovery on a backup created with
\fIxtrabackup \-\-backup\fP, so that it is ready to use. See
preparing a backup\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-print\-defaults
Print the program argument list and exit. Must be given as the first option
on the command\-line.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-print\-param
Makes \fIxtrabackup\fP print out parameters that to copy the data files back to their original locations to restore them. See
scripting\-xtrabackup\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-read\-buffer\-size[=#]
Set read buffer size. The given value is scaled up to page size. The
default is 10MB.
.sp
Use this variable to increase the xbcloud/xbstream chunk size from the default value of 10MB.
.UNINDENT
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
When you use encryption, to adjust the xbcloud/xbstream chunk size, adjust both the \fB\-\-encrypt\-chunk\-size\fP and \fB\-\-read\-buffer\-size\fP variables.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ xtrabackup ... \-\-read\-buffer\-size=1G | xbcloud put ...
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rebuild\-indexes
Rebuild secondary indexes in InnoDB tables after applying the log. Only use
with \fI\-\-prepare\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rebuild\-threads=#
This option defines the number of threads to rebuild indexes in a compact
backup. Only use with \fI\-\-prepare\fP and \fI\-\-rebuild\-indexes\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-redo\-log\-version=#
The redo log version of the backup. Use only with \fI\-\-prepare\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-reencrypt\-for\-server\-id=<new_server_id>
Use this option to start the server instance with different server_id from
the one the encrypted backup was taken from, like a replication replica or a
Galera node. When this option is used, xtrabackup will, as a prepare step,
generate a new master key with ID based on the new server_id, store it into
keyring file, and re\-encrypt the tablespace keys inside of tablespace
headers. The option should be passed for \fI\-\-prepare\fP (final step).
.UNINDENT
.INDENT 0.0
.TP
.B \-\-remove\-original
Implemented in \fIPercona XtraBackup\fP 2.4.6, this option when specified will
remove \fI\&.qp\fP, \fI\&.xbcrypt\fP and \fI\&.qp.xbcrypt\fP files after
decryption and decompression.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-rsync
Use the \fBrsync\fP utility to optimize local file transfers.
.sp
When this option is specified, xtrabackup uses \fBrsync\fP to copy all
non\-InnoDB files instead of spawning a separate copy command for each file.
This option is faster for servers with a large number of databases or tables.
.sp
This option cannot be used with \fI\-\-stream\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-safe\-slave\-backup
When specified, xtrabackup will stop the replica SQL thread just before
running \fBFLUSH TABLES WITH READ LOCK\fP and wait to start backup until
\fBSlave_open_temp_tables\fP in \fBSHOW STATUS\fP is zero. If there are no open
temporary tables, the backup will occur; otherwise the SQL thread will
be started and stopped until there are no open temporary tables. The backup
will fail if \fBSlave_open_temp_tables\fP does not become zero after
\fIxtrabackup \-\-safe\-slave\-backup\-timeout\fP seconds. The replica SQL
thread will be restarted when the backup finishes. This option is
implemented to deal with \fI\%replicating temporary tables\fP
and isn\(aqt neccessary with Row\-Based\-Replication.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-safe\-slave\-backup\-timeout=SECONDS
How many seconds \fIxtrabackup \-\-safe\-slave\-backup\fP should wait for
\fBSlave_open_temp_tables\fP to become zero. The default is 300 seconds.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-secure\-auth
Refuse client connecting to the server if it uses old (pre\-4.1.1) protocol.
(Enabled by default; use \-\-skip\-secure\-auth to disable.)
.UNINDENT
.INDENT 0.0
.TP
.B \-\-server\-id=#
The server instance being backed up.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-server\-public\-key\-path=name
File path the server\(aqs public RSA key in PEM format.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-skip\-tables\-compatibility\-check
This option disables the engine compatibility warning.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
\fI\-\-tables\-compatibility\-check\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-slave\-info
This option is useful when backing up a replication replica server. It prints
the binary log position of the source server. It also writes the binary log
coordinates to the \fIxtrabackup_slave_info\fP file as a \fBCHANGE MASTER\fP
command. A new replica for this source can be set up by starting a replica server
on this backup and issuing a \fBCHANGE MASTER\fP command with the binary log
position saved in the \fIxtrabackup_slave_info\fP file.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ssl
Enable secure connection. More information can be found in \fI\%\-\-ssl\fP
MySQL server documentation.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ssl\-ca
Path of the file, which contains a list of trusted SSL CAs. More information
can be found in \fI\%\-\-ssl\-ca\fP
MySQL server documentation.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ssl\-capath
The directory path that contains trusted SSL CA certificates in the PEM format. More
information can be found in \fI\%\-\-ssl\-capath\fP
MySQL server documentation.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ssl\-cert
Path of the file which contains X509 certificate in PEM format. More
information can be found in \fI\%\-\-ssl\-cert\fP
MySQL server documentation.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ssl\-cipher
List of permitted ciphers to use for connection encryption. More information
can be found in \fI\%\-\-ssl\-cipher\fP
MySQL server documentation.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ssl\-crl
Path of the file that contains certificate revocation lists. More
information can be found in \fI\%\-\-ssl\-crl\fP
MySQL server documentation.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ssl\-crlpath
Path of the directory that contains certificate revocation list files. More
information can be found in \fI\%\-\-ssl\-crlpath\fP
MySQL server documentation.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ssl\-key
Path of the file that contains X509 key in PEM format. More information can be
found in \fI\%\-\-ssl\-key\fP
MySQL server documentation.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ssl\-mode
The security state of connection to server. More information can be found in
\fI\%\-\-ssl\-mode\fP
MySQL server documentation.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-ssl\-verify\-server\-cert
Verify server certificate Common Name value against host name used when
connecting to server. More information can be found in
\fI\%\-\-ssl\-verify\-server\-cert\fP
MySQL server documentation.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-stats
Causes \fIxtrabackup\fP to scan the specified data files and print out
index statistics.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-stream=name
Stream all backup files to the standard output in the specified format.
Currently supported formats are \fBxbstream\fP and \fBtar\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tables=name
A regular expression against which the full tablename, in
\fBdatabasename.tablename\fP format, is matched. If the name matches, the
table is backed up. See partial backups\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tables\-compatibility\-check
This option enables the engine compatibility warning.
.sp
The default value is \fBON\fP\&. Use \fI\-\-skip\-tables\-compatibility\-check\fP
to disable.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tables\-exclude=name
Filtering by regexp for table names. Operates the same
way as \fIxtrabackup \-\-tables\fP, but matched names are excluded from
backup. Note that this option has a higher priority than
\fIxtrabackup \-\-tables\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tables\-file=name
A file containing one table name per line, in databasename.tablename format.
The backup will be limited to the specified tables. See
scripting\-xtrabackup\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-target\-dir=DIRECTORY
This option specifies the destination directory for the backup. If the
directory does not exist, \fIxtrabackup\fP creates it. If the directory
does exist and is empty, \fIxtrabackup\fP will succeed.
\fIxtrabackup\fP will not overwrite existing files; however it will
fail with operating system error 17, \fBfile exists\fP\&.
.sp
If this option is a relative path, it is interpreted as being relative to
the current working directory from which \fIxtrabackup\fP is executed.
.sp
In order to perform a backup, you need \fBREAD\fP, \fBWRITE\fP, and \fBEXECUTE\fP
permissions at a filesystem level for the directory that you supply as the
value of \fI\-\-target\-dir\fP\&.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-throttle=#
This option limits the number of chunks copied per second. The chunk size is
\fI10 MB\fP\&.
.sp
To limit the bandwidth to \fI10 MB/s\fP, set the option to \fI1\fP:
\fI\-\-throttle=1\fP\&.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B More information about how to throttle a backup
throttling_backups
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tls\-version=name
The TLS version to use. The allowed values are the following:
.INDENT 7.0
.IP \(bu 2
TLSv1
.IP \(bu 2
TLSv1.1
.IP \(bu 2
TLSv1.2
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B \-\-tmpdir=name
This option is currently not used for anything except printing out the
correct tmpdir parameter when \fIxtrabackup \-\-print\-param\fP is used.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-to\-archived\-lsn=LSN
This option is used to specify the LSN to which the logs should be applied
when backups are being prepared. It can only be used with the
\fIxtrabackup \-\-prepare\fP option.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-transition\-key
This option is used to enable processing the backup without accessing the
keyring vault server. In this case, \fIxtrabackup\fP derives the AES
encryption key from the specified passphrase and uses it to encrypt
tablespace keys of tablespaces being backed up.
.sp
If \fI\-\-transition\-key <xtrabackup \-\-transition\-key>\fP does not have any
value, \fIxtrabackup\fP will ask for it. The same passphrase should be
specified for the \fIxtrabackup \-\-prepare\fP command.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-use\-memory=#
This option affects how much memory is allocated for preparing a backup with
\fIxtrabackup \-\-prepare\fP, or analyzing statistics with
\fIxtrabackup \-\-stats\fP\&. Its purpose is similar
to \fIinnodb_buffer_pool_size\fP\&. It does not do the same thing as the
similarly named option in Oracle\(aqs InnoDB Hot Backup tool.
The default value is 100MB, and if you have enough available memory, 1GB to
2GB is a good recommended value. Multiples are supported providing the unit
(e.g. 1MB, 1M, 1GB, 1G).
.UNINDENT
.INDENT 0.0
.TP
.B \-\-user=USERNAME
This option specifies the MySQL username used when connecting to the server,
if that\(aqs not the current user. The option accepts a string argument. See
mysql \-\-help for details.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-version
This option prints \fIxtrabackup\fP version and exits.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-xtrabackup\-plugin\-dir=DIRNAME
The absolute path to the directory that contains the \fBkeyring\fP plugin.
.sp
\fBSEE ALSO:\fP
.INDENT 7.0
.INDENT 3.5
.INDENT 0.0
.TP
.B \fIPercona Server for MySQL\fP Documentation: keyring_vault plugin with Data at Rest Encryption
\fI\%https://www.percona.com/doc/percona\-server/5.7/security/data\-at\-rest\-encryption.html\fP
.TP
.B \fIMySQL\fP Documentation: Using the keyring_file File\-Based Plugin
\fI\%https://dev.mysql.com/doc/refman/5.7/en/keyring\-file\-plugin.html\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SH AUTHOR
Percona LLC and/or its affiliates
.SH COPYRIGHT
2009-2022, Percona LLC and/or its affiliates
.\" Generated by docutils manpage writer.
.
